{
  "info": {
    "_postman_id": "a1b2c3d4-e5f6-7890-1234-abcdef123458",
    "name": "Aurite MCP Server - Config Routes",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": "Collection for testing the config-related routes of the Aurite MCP FastAPI server."
  },
  "item": [
    {
      "name": "[Dynamic] Register Client (Success)",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "X-API-Key",
            "value": "{{api_key}}",
            "type": "text"
          },
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"name\": \"dynamic_test_client\",\n    \"transport_type\": \"local\",\n    \"command\": \"python\",\n    \"args\": [\"-m\", \"tests.fixtures.servers.weather_mcp_server\"],\n    \"capabilities\": [\"tools\"],\n    \"timeout\": 10.0\n}"
        },
        "url": {
          "raw": "{{base_url}}/clients/register",
          "host": ["{{base_url}}"],
          "path": ["clients", "register"]
        },
        "description": "Registers a new client dynamically."
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 201 or 409\", function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([201, 409]);",
              "});",
              "",
              "pm.test(\"Response body is correct\", function () {",
              "    if (pm.response.code === 201) {",
              "        var jsonData = pm.response.json();",
              "        pm.expect(jsonData).to.eql({status: 'success', name: 'dynamic_test_client'});",
              "    }",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ]
    },
    {
      "name": "[Dynamic] Register Agent (Success)",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "X-API-Key",
            "value": "{{api_key}}",
            "type": "text"
          },
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"name\": \"Dynamic Test Agent\",\n    \"mcp_servers\": [\"dynamic_test_client\", \"weather_server\"],\n    \"system_prompt\": \"This is a dynamically registered agent.\",\n    \"llm_config_id\": \"anthropic_claude_3_haiku\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/agents/register",
          "host": ["{{base_url}}"],
          "path": ["agents", "register"]
        },
        "description": "Registers a new agent dynamically."
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 201 Created\", function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test(\"Response body is correct\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.eql({status: 'success', agent_name: 'Dynamic Test Agent'});",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ]
    },
    {
      "name": "[Dynamic] Register Agent (Duplicate Name)",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "X-API-Key",
            "value": "{{api_key}}",
            "type": "text"
          },
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"name\": \"Dynamic Test Agent\",\n    \"mcp_servers\": [\"weather_server\"],\n    \"system_prompt\": \"Attempting duplicate registration.\",\n    \"llm_config_id\": \"anthropic_claude_3_haiku\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/agents/register",
          "host": ["{{base_url}}"],
          "path": ["agents", "register"]
        },
        "description": "Attempts to register an agent with a name that already exists."
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 201 Created\", function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test(\"Response body is correct for update\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.eql({status: 'success', agent_name: 'Dynamic Test Agent'});",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ]
    },
    {
      "name": "[Dynamic] Register Agent (Invalid Client ID)",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "X-API-Key",
            "value": "{{api_key}}",
            "type": "text"
          },
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"name\": \"Agent With Invalid Client\",\n    \"mcp_servers\": [\"non_existent_client\"],\n    \"system_prompt\": \"This registration should fail.\",\n    \"llm_config_id\": \"anthropic_claude_3_haiku\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/agents/register",
          "host": ["{{base_url}}"],
          "path": ["agents", "register"]
        },
        "description": "Attempts to register an agent referencing a client ID that does not exist."
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 400 Bad Request\", function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "pm.test(\"Response body contains error detail\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('detail');",
              "    pm.expect(jsonData.detail).to.contain('not found');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ]
    },
    {
      "name": "[Dynamic] Register Workflow (Success)",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "X-API-Key",
            "value": "{{api_key}}",
            "type": "text"
          },
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"name\": \"Dynamic Test Workflow\",\n    \"steps\": [\"Weather Agent\", \"Weather Planning Workflow Step 2\"],\n    \"description\": \"A workflow registered dynamically.\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/workflows/register",
          "host": ["{{base_url}}"],
          "path": ["workflows", "register"]
        },
        "description": "Registers a new workflow dynamically."
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 201 Created\", function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test(\"Response body is correct\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.eql({status: 'success', workflow_name: 'Dynamic Test Workflow'});",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ]
    },
    {
      "name": "[Dynamic] Register Workflow (Duplicate Name)",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "X-API-Key",
            "value": "{{api_key}}",
            "type": "text"
          },
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"name\": \"Dynamic Test Workflow\",\n    \"steps\": [\"Weather Agent\"],\n    \"description\": \"Attempting duplicate registration.\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/workflows/register",
          "host": ["{{base_url}}"],
          "path": ["workflows", "register"]
        },
        "description": "Attempts to register a workflow with a name that already exists."
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 201 Created\", function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test(\"Response body is correct for update\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.eql({status: 'success', workflow_name: 'Dynamic Test Workflow'});",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ]
    },
    {
      "name": "[Dynamic] Register Workflow (Invalid Agent Name)",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "X-API-Key",
            "value": "{{api_key}}",
            "type": "text"
          },
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"name\": \"Workflow With Invalid Agent\",\n    \"steps\": [\"Non_Existent_Agent\"],\n    \"description\": \"This registration should fail.\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/workflows/register",
          "host": ["{{base_url}}"],
          "path": ["workflows", "register"]
        },
        "description": "Attempts to register a workflow referencing an agent name that does not exist."
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 400 Bad Request\", function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "pm.test(\"Response body contains error detail\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('detail');",
              "    pm.expect(jsonData.detail).to.contain('not found');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ]
    },
    {
      "name": "Change Project and Verify Agents",
      "item": [
        {
          "name": "List Agents (Initial - Default Project)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 for initial agent list\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Initial agents list is correct for default project\", function () {",
                  "    let initialAgents = pm.response.json();",
                  "    pm.expect(initialAgents).to.be.an('array').that.includes('Weather Agent');",
                  "    pm.expect(initialAgents).to.be.an('array').not.that.includes('Minimal Test Agent');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{api_key}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/components/agents",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "components",
                "agents"
              ]
            }
          },
          "response": []
        }
      ],
      "description": "A sequence of requests to test changing projects and verifying agent lists."
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8000",
      "type": "string",
      "description": "Base URL of the running FastAPI server"
    },
    {
      "key": "api_key",
      "value": "YOUR_API_KEY_HERE",
      "type": "secret",
      "description": "API Key for accessing protected endpoints (Set this in your environment)"
    }
  ]
}
