name: Publish to PyPI

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 1.0.0)'
        required: true
        type: string
      environment:
        description: 'Publishing environment'
        required: true
        default: 'testpypi'
        type: choice
        options:
          - testpypi
          - pypi
      confirm:
        description: 'Type "CONFIRM" to proceed with publishing'
        required: true
        type: string

jobs:
  validate-inputs:
    name: Validate Publishing Inputs
    runs-on: ubuntu-latest
    
    steps:
      - name: Validate confirmation
        run: |
          if [ "${{ github.event.inputs.confirm }}" != "CONFIRM" ]; then
            echo "‚ùå Publishing not confirmed. Please type 'CONFIRM' to proceed."
            exit 1
          fi
          echo "‚úÖ Publishing confirmed"
      
      - name: Validate version format
        run: |
          VERSION="${{ github.event.inputs.version }}"
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå Invalid version format: $VERSION"
            echo "Expected format: X.Y.Z (e.g., 1.0.0)"
            exit 1
          fi
          echo "‚úÖ Version format valid: $VERSION"

  download-artifacts:
    name: Download Release Artifacts
    runs-on: ubuntu-latest
    needs: validate-inputs
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download release artifacts
        uses: actions/download-artifact@v3
        with:
          name: release-assets-${{ github.event.inputs.version }}
          path: ./artifacts
      
      - name: Verify artifacts
        run: |
          echo "üîç Verifying downloaded artifacts..."
          
          if [ ! -d "./artifacts/dist" ]; then
            echo "‚ùå Python package artifacts not found!"
            exit 1
          fi
          
          # Check for both wheel and tarball
          WHEEL_COUNT=$(find ./artifacts/dist -name "*.whl" | wc -l)
          TARBALL_COUNT=$(find ./artifacts/dist -name "*.tar.gz" | wc -l)
          
          if [ $WHEEL_COUNT -eq 0 ] || [ $TARBALL_COUNT -eq 0 ]; then
            echo "‚ùå Missing package files (need both .whl and .tar.gz)"
            echo "Found wheels: $WHEEL_COUNT"
            echo "Found tarballs: $TARBALL_COUNT"
            exit 1
          fi
          
          echo "‚úÖ Package artifacts verified"
          echo "Wheels: $WHEEL_COUNT"
          echo "Tarballs: $TARBALL_COUNT"
          
          # List all files for verification
          echo "üì¶ Package contents:"
          ls -la ./artifacts/dist/
      
      - name: Upload verified artifacts
        uses: actions/upload-artifact@v3
        with:
          name: verified-python-packages-${{ github.event.inputs.version }}
          path: ./artifacts/dist/
          retention-days: 7

  publish-package:
    name: Publish Python Package
    runs-on: ubuntu-latest
    needs: download-artifacts
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install publishing tools
        run: |
          python -m pip install --upgrade pip
          pip install twine
      
      - name: Download verified artifacts
        uses: actions/download-artifact@v3
        with:
          name: verified-python-packages-${{ github.event.inputs.version }}
          path: ./dist
      
      - name: Verify package integrity
        run: |
          echo "üîç Final package verification..."
          
          # Check package with twine
          twine check dist/*
          
          if [ $? -ne 0 ]; then
            echo "‚ùå Package integrity check failed!"
            exit 1
          fi
          
          echo "‚úÖ Package integrity verified"
      
      - name: Publish to Test PyPI
        if: github.event.inputs.environment == 'testpypi'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: |
          echo "üì§ Publishing to Test PyPI..."
          twine upload --repository testpypi dist/*
          
          echo "‚úÖ Successfully published to Test PyPI!"
          echo "üîó View at: https://test.pypi.org/project/aurite/"
      
      - name: Publish to PyPI
        if: github.event.inputs.environment == 'pypi'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          echo "üì§ Publishing to PyPI..."
          twine upload dist/*
          
          echo "‚úÖ Successfully published to PyPI!"
          echo "üîó View at: https://pypi.org/project/aurite/"
      
      - name: Create publication summary
        run: |
          echo "## üéâ Python Package Published" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ github.event.inputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Published by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event.inputs.environment }}" == "pypi" ]; then
            echo "### üöÄ Production Release" >> $GITHUB_STEP_SUMMARY
            echo "Package is now available for installation:" >> $GITHUB_STEP_SUMMARY
            echo '```bash' >> $GITHUB_STEP_SUMMARY
            echo "pip install aurite==${{ github.event.inputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üîó **PyPI:** https://pypi.org/project/aurite/" >> $GITHUB_STEP_SUMMARY
          else
            echo "### üß™ Test Release" >> $GITHUB_STEP_SUMMARY
            echo "Package is available for testing:" >> $GITHUB_STEP_SUMMARY
            echo '```bash' >> $GITHUB_STEP_SUMMARY
            echo "pip install --index-url https://test.pypi.org/simple/ aurite==${{ github.event.inputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üîó **Test PyPI:** https://test.pypi.org/project/aurite/" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üì¶ Package Details" >> $GITHUB_STEP_SUMMARY
          echo "- Includes pre-built Aurite Studio static assets" >> $GITHUB_STEP_SUMMARY
          echo "- Ready for production use with \`aurite api\` command" >> $GITHUB_STEP_SUMMARY
          echo "- No Node.js dependency required for end users" >> $GITHUB_STEP_SUMMARY

  notify-completion:
    name: Notify Publication Complete
    runs-on: ubuntu-latest
    needs: publish-package
    if: always()
    
    steps:
      - name: Publication Success
        if: needs.publish-package.result == 'success'
        run: |
          echo "‚úÖ Python package published successfully!"
          echo "Version ${{ github.event.inputs.version }} is now available on ${{ github.event.inputs.environment }}"
      
      - name: Publication Failure
        if: needs.publish-package.result == 'failure'
        run: |
          echo "‚ùå Python package publication failed!"
          echo "Please check the logs and retry if needed."
          exit 1
