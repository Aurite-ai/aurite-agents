name: Publish to npm

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 1.0.0)'
        required: true
        type: string
      environment:
        description: 'Publishing environment'
        required: true
        default: 'npm-test'
        type: choice
        options:
          - npm-test
          - npm
      confirm:
        description: 'Type "CONFIRM" to proceed with publishing'
        required: true
        type: string

jobs:
  validate-inputs:
    name: Validate Publishing Inputs
    runs-on: ubuntu-latest
    
    steps:
      - name: Validate confirmation
        run: |
          if [ "${{ github.event.inputs.confirm }}" != "CONFIRM" ]; then
            echo "‚ùå Publishing not confirmed. Please type 'CONFIRM' to proceed."
            exit 1
          fi
          echo "‚úÖ Publishing confirmed"
      
      - name: Validate version format
        run: |
          VERSION="${{ github.event.inputs.version }}"
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå Invalid version format: $VERSION"
            echo "Expected format: X.Y.Z (e.g., 1.0.0)"
            exit 1
          fi
          echo "‚úÖ Version format valid: $VERSION"

  download-artifacts:
    name: Download Release Artifacts
    runs-on: ubuntu-latest
    needs: validate-inputs
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download release artifacts
        uses: actions/download-artifact@v3
        with:
          name: release-assets-${{ github.event.inputs.version }}
          path: ./artifacts
      
      - name: Verify API client artifacts
        run: |
          echo "üîç Verifying API client artifacts..."
          
          if [ ! -d "./artifacts/frontend/packages/api-client/dist" ]; then
            echo "‚ùå API client build artifacts not found!"
            echo "Expected: ./artifacts/frontend/packages/api-client/dist"
            echo "Available artifacts:"
            find ./artifacts -type d -name "dist" || echo "No dist directories found"
            exit 1
          fi
          
          # Check for essential files
          DIST_DIR="./artifacts/frontend/packages/api-client/dist"
          
          if [ ! -f "$DIST_DIR/index.js" ] && [ ! -f "$DIST_DIR/index.d.ts" ]; then
            echo "‚ùå Missing essential API client files!"
            echo "Expected: index.js or index.d.ts"
            echo "Found files:"
            ls -la "$DIST_DIR/" || echo "Directory is empty"
            exit 1
          fi
          
          echo "‚úÖ API client artifacts verified"
          echo "üì¶ API client contents:"
          ls -la "$DIST_DIR/"
      
      - name: Prepare API client for publishing
        run: |
          echo "üì¶ Preparing API client package..."
          
          # Copy the entire api-client package structure
          cp -r ./artifacts/frontend/packages/api-client ./api-client-package
          
          # Ensure we have the source package.json
          if [ ! -f "./frontend/packages/api-client/package.json" ]; then
            echo "‚ùå Source package.json not found!"
            exit 1
          fi
          
          # Copy the source package.json to ensure we have all metadata
          cp ./frontend/packages/api-client/package.json ./api-client-package/
          
          # Update version in package.json
          cd ./api-client-package
          npm version ${{ github.event.inputs.version }} --no-git-tag-version
          
          echo "‚úÖ API client package prepared"
          echo "üìã Package info:"
          cat package.json | jq '{name, version, description, main, types}'
      
      - name: Upload prepared package
        uses: actions/upload-artifact@v3
        with:
          name: prepared-api-client-${{ github.event.inputs.version }}
          path: ./api-client-package/
          retention-days: 7

  publish-package:
    name: Publish API Client Package
    runs-on: ubuntu-latest
    needs: download-artifacts
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Download prepared package
        uses: actions/download-artifact@v3
        with:
          name: prepared-api-client-${{ github.event.inputs.version }}
          path: ./package
      
      - name: Verify package integrity
        run: |
          cd ./package
          echo "üîç Final package verification..."
          
          # Check package structure
          if [ ! -f "package.json" ]; then
            echo "‚ùå package.json not found!"
            exit 1
          fi
          
          if [ ! -d "dist" ]; then
            echo "‚ùå dist directory not found!"
            exit 1
          fi
          
          # Validate package.json
          npm pkg get name version main types
          
          # Check if we can pack the package
          npm pack --dry-run
          
          if [ $? -ne 0 ]; then
            echo "‚ùå Package validation failed!"
            exit 1
          fi
          
          echo "‚úÖ Package integrity verified"
      
      - name: Publish to npm (test tag)
        if: github.event.inputs.environment == 'npm-test'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          cd ./package
          echo "üì§ Publishing to npm with 'beta' tag..."
          npm publish --tag beta
          
          PACKAGE_NAME=$(npm pkg get name | tr -d '"')
          echo "‚úÖ Successfully published to npm with beta tag!"
          echo "üîó View at: https://www.npmjs.com/package/$PACKAGE_NAME"
          echo "üì¶ Install with: npm install $PACKAGE_NAME@beta"
      
      - name: Publish to npm (latest)
        if: github.event.inputs.environment == 'npm'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          cd ./package
          echo "üì§ Publishing to npm as 'latest'..."
          npm publish
          
          PACKAGE_NAME=$(npm pkg get name | tr -d '"')
          echo "‚úÖ Successfully published to npm!"
          echo "üîó View at: https://www.npmjs.com/package/$PACKAGE_NAME"
          echo "üì¶ Install with: npm install $PACKAGE_NAME"
      
      - name: Create publication summary
        run: |
          cd ./package
          PACKAGE_NAME=$(npm pkg get name | tr -d '"')
          
          echo "## üéâ API Client Published" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Package:** $PACKAGE_NAME" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ github.event.inputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Published by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event.inputs.environment }}" == "npm" ]; then
            echo "### üöÄ Production Release" >> $GITHUB_STEP_SUMMARY
            echo "Package is now available for installation:" >> $GITHUB_STEP_SUMMARY
            echo '```bash' >> $GITHUB_STEP_SUMMARY
            echo "npm install $PACKAGE_NAME@${{ github.event.inputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üîó **npm:** https://www.npmjs.com/package/$PACKAGE_NAME" >> $GITHUB_STEP_SUMMARY
          else
            echo "### üß™ Beta Release" >> $GITHUB_STEP_SUMMARY
            echo "Package is available for testing:" >> $GITHUB_STEP_SUMMARY
            echo '```bash' >> $GITHUB_STEP_SUMMARY
            echo "npm install $PACKAGE_NAME@beta" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üîó **npm:** https://www.npmjs.com/package/$PACKAGE_NAME" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üì¶ Package Details" >> $GITHUB_STEP_SUMMARY
          echo "- TypeScript API client for Aurite Agents" >> $GITHUB_STEP_SUMMARY
          echo "- Full type definitions included" >> $GITHUB_STEP_SUMMARY
          echo "- Compatible with Node.js and browser environments" >> $GITHUB_STEP_SUMMARY

  notify-completion:
    name: Notify Publication Complete
    runs-on: ubuntu-latest
    needs: publish-package
    if: always()
    
    steps:
      - name: Publication Success
        if: needs.publish-package.result == 'success'
        run: |
          echo "‚úÖ API client package published successfully!"
          echo "Version ${{ github.event.inputs.version }} is now available on npm"
      
      - name: Publication Failure
        if: needs.publish-package.result == 'failure'
        run: |
          echo "‚ùå API client package publication failed!"
          echo "Please check the logs and retry if needed."
          exit 1
