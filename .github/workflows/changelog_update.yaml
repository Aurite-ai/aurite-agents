name: Update Changelog

on:
  pull_request:
    types: [closed]
    branches: [main]

jobs:
  update-changelog:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Extract and validate PR info
        id: pr-info
        run: |
          # Extract PR information with validation
          PR_NUM="${{ github.event.pull_request.number }}"
          PR_TITLE=$(echo "${{ github.event.pull_request.title }}" | sed 's/"/\\"/g')
          PR_AUTHOR="${{ github.event.pull_request.user.login }}"
          PR_URL="${{ github.event.pull_request.html_url }}"
          LABELS="${{ join(github.event.pull_request.labels.*.name, ',') }}"
          
          # Validate required fields
          if [ -z "$PR_NUM" ] || [ -z "$PR_TITLE" ] || [ -z "$PR_AUTHOR" ] || [ -z "$PR_URL" ]; then
            echo "::error::Missing required PR information"
            exit 1
          fi
          
          echo "pr_num=$PR_NUM" >> $GITHUB_OUTPUT
          echo "pr_title=$PR_TITLE" >> $GITHUB_OUTPUT
          echo "pr_author=$PR_AUTHOR" >> $GITHUB_OUTPUT
          echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT
          echo "pr_labels=$LABELS" >> $GITHUB_OUTPUT

      - name: Determine change type and release type from labels and PR title
        id: change-type
        run: |
          LABELS="${{ steps.pr-info.outputs.pr_labels }}"
          PR_TITLE="${{ steps.pr-info.outputs.pr_title }}"
          
          # Default values
          SECTION="Changed"
          RELEASE_TYPE=""
          IS_RELEASE="false"
          ENVIRONMENT=""
          SHOULD_RELEASE="false"
          
          # Check for version labels to determine if this is a release
          case "$LABELS" in
            *"major"*) RELEASE_TYPE="major"; IS_RELEASE="true" ;;
            *"minor"*) RELEASE_TYPE="minor"; IS_RELEASE="true" ;;
            *"patch"*) RELEASE_TYPE="patch"; IS_RELEASE="true" ;;
          esac
          
          # Check for environment labels for PyPI release
          if [[ "$IS_RELEASE" == "true" ]]; then
            if echo "$LABELS" | grep -q "prod"; then
              ENVIRONMENT="prod"
              SHOULD_RELEASE="true"
            elif echo "$LABELS" | grep -q "test"; then
              ENVIRONMENT="test"
              SHOULD_RELEASE="true"
            fi
          fi
          
          # First check PR title for conventional commit prefixes
          case "$PR_TITLE" in
            "feat:"*|"feature:"*) SECTION="Added" ;;
            "fix:"*|"bugfix:"*) SECTION="Fixed" ;;
            "docs:"*|"doc:"*) SECTION="Documentation" ;;
            "perf:"*|"performance:"*) SECTION="Performance" ;;
            "breaking:"*|"BREAKING:"*) SECTION="Breaking Changes" ;;
            "security:"*|"sec:"*) SECTION="Security" ;;
            "deprecate:"*|"deprecated:"*) SECTION="Deprecated" ;;
            "remove:"*|"removed:"*) SECTION="Removed" ;;
            "refactor:"*|"test:"*|"tests:"*|"chore:"*|"style:"*|"ci:"*|"build:"*|"revert:"*) SECTION="Changed" ;;
          esac
          
          # Then check labels to categorize the change (labels override PR title)
          case "$LABELS" in
            *"breaking"*) SECTION="Breaking Changes" ;;
            *"security"*) SECTION="Security" ;;
            *"feature"*|*"enhancement"*) SECTION="Added" ;;
            *"bug"*|*"fix"*) SECTION="Fixed" ;;
            *"deprecated"*) SECTION="Deprecated" ;;
            *"removed"*) SECTION="Removed" ;;
            *"performance"*) SECTION="Performance" ;;
            *"documentation"*|*"docs"*) SECTION="Documentation" ;;
          esac
          
          echo "section=$SECTION" >> $GITHUB_OUTPUT
          echo "release_type=$RELEASE_TYPE" >> $GITHUB_OUTPUT
          echo "is_release=$IS_RELEASE" >> $GITHUB_OUTPUT
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "should_release=$SHOULD_RELEASE" >> $GITHUB_OUTPUT
          echo "Change type: $SECTION (from title: '$PR_TITLE', labels: '$LABELS')"
          echo "Release type: $RELEASE_TYPE"
          echo "Is release: $IS_RELEASE"
          echo "Environment: $ENVIRONMENT"
          echo "Should release to PyPI: $SHOULD_RELEASE"

      - name: Get current version from pyproject.toml
        if: steps.change-type.outputs.is_release == 'true'
        id: get-version
        run: |
          if [ -f "pyproject.toml" ]; then
            CURRENT_VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
            if [ -z "$CURRENT_VERSION" ]; then
              echo "::error::Could not extract version from pyproject.toml"
              exit 1
            fi
          else
            echo "::error::pyproject.toml not found"
            exit 1
          fi
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version from pyproject.toml: $CURRENT_VERSION"

      - name: Get previous version from git tags
        if: steps.change-type.outputs.is_release == 'true'
        id: get-previous-version
        run: |
          # Get the latest git tag (previous version)
          PREVIOUS_VERSION=$(git tag --sort=-version:refname | head -n 1 | sed 's/^v//' || echo "0.0.0")
          
          # If no tags exist, use 0.0.0
          if [ -z "$PREVIOUS_VERSION" ]; then
            PREVIOUS_VERSION="0.0.0"
          fi
          
          echo "previous_version=$PREVIOUS_VERSION" >> $GITHUB_OUTPUT
          echo "Previous version from git tags: $PREVIOUS_VERSION"

      - name: Update changelog for PR
        run: |
          python3 .github/workflows/scripts/changelog_updater.py \
            --action add \
            --section "${{ steps.change-type.outputs.section }}" \
            --pr-title "${{ steps.pr-info.outputs.pr_title }}" \
            --pr-author "${{ steps.pr-info.outputs.pr_author }}" \
            --pr-num "${{ steps.pr-info.outputs.pr_num }}" \
            --pr-url "${{ steps.pr-info.outputs.pr_url }}"
          
          if [ $? -ne 0 ]; then
            echo "::error::Failed to update changelog"
            exit 1
          fi

      - name: Release version in changelog
        if: steps.change-type.outputs.is_release == 'true'
        id: release-version
        run: |
          set -e
          
          CURRENT_VERSION="${{ steps.get-version.outputs.current_version }}"
          PREVIOUS_VERSION="${{ steps.get-previous-version.outputs.previous_version }}"
          DATE=$(date '+%Y-%m-%d')

          # Use the current version from pyproject.toml as the release version
          NEW_VERSION="$CURRENT_VERSION"
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Releasing version: $NEW_VERSION (previous: $PREVIOUS_VERSION)"

          # Update changelog to release current unreleased changes
          python3 .github/workflows/scripts/changelog_updater.py \
            --action release \
            --new-version "$NEW_VERSION" \
            --current-version "$PREVIOUS_VERSION" \
            --date "$DATE" \
            --repo "${{ github.repository }}"
          
          if [ $? -ne 0 ]; then
            echo "::error::Failed to release changelog"
            exit 1
          fi

      - name: Validate changes before commit
        run: |
          # Check if changelog exists and is valid
          if [ ! -f "CHANGELOG.md" ]; then
            echo "::error::CHANGELOG.md not found"
            exit 1
          fi
          
          # Basic validation of changelog format
          if ! grep -q "## \[Unreleased\]" CHANGELOG.md; then
            echo "::error::Invalid changelog format - missing [Unreleased] section"
            exit 1
          fi
          
          echo "Changelog validation passed"

      - name: Commit and push changes
        run: |
          set -e
          
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Check if there are changes to commit
          if git diff --quiet CHANGELOG.md; then
            echo "No changes to commit"
            exit 0
          fi

          # Add files first before pulling
          git add CHANGELOG.md

          # Create commit message based on whether this is a release
          if [ "${{ steps.change-type.outputs.is_release }}" == "true" ]; then
            COMMIT_MSG="docs: Release changelog for version ${{ steps.release-version.outputs.new_version }} (PR #${{ steps.pr-info.outputs.pr_num }})"
          else
            COMMIT_MSG="docs: Update changelog for PR #${{ steps.pr-info.outputs.pr_num }}"
          fi

          # Commit changes first
          git commit -m "$COMMIT_MSG"

          # Pull latest changes with rebase and push
          git pull --rebase origin main
          git push origin main

      # ============ PYPI RELEASE SECTION ============

      - name: Install Poetry
        if: steps.change-type.outputs.should_release == 'true'
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache Poetry dependencies
        if: steps.change-type.outputs.should_release == 'true'
        uses: actions/cache@v4
        with:
          path: .venv
          key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock', '**/pyproject.toml') }}
          restore-keys: |
            poetry-${{ runner.os }}-

      - name: Install dependencies
        if: steps.change-type.outputs.should_release == 'true'
        run: poetry install --no-interaction --no-ansi

      - name: Test build package
        if: steps.change-type.outputs.should_release == 'true'
        run: |
          # Clean any existing dist directory first
          rm -rf dist/
          poetry build

      - name: Verify build artifacts
        if: steps.change-type.outputs.should_release == 'true'
        run: |
          # Ensure build artifacts exist and are valid
          if [ ! -d "dist/" ] || [ -z "$(ls -A dist/)" ]; then
            echo "::error::Build artifacts not found in dist/"
            exit 1
          fi
          
          # List build artifacts
          echo "Build artifacts created:"
          ls -la dist/
          
          # Verify wheel file exists
          if ! ls dist/*.whl 1> /dev/null 2>&1; then
            echo "::error::No .whl file found in dist/"
            exit 1
          fi
          
          echo "Wheel file successfully created"

      - name: Get version for test or bump version for production
        if: steps.change-type.outputs.should_release == 'true'
        id: version-bump
        run: |
          set -e
          
          if [[ "${{ steps.change-type.outputs.environment }}" == "prod" ]]; then
            # Production run - bump version and tag
            # Configure git
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            
            # Sync with remote to get latest changes from changelog workflow
            echo "Fetching latest changes from remote..."
            git fetch origin
            git pull origin main --rebase
            
            # Clean dist directory from test build
            rm -rf dist/
            
            # Bump version using Poetry
            poetry version ${{ steps.change-type.outputs.release_type }}
            NEW_VERSION=$(poetry version -s)
            
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "New version: $NEW_VERSION"
            
            # Commit version bump
            git add pyproject.toml
            git commit -m "chore: bump version to $NEW_VERSION"
            git tag -a "v$NEW_VERSION" -m "Release version $NEW_VERSION"
            
            # Push changes and tag
            git push origin main
            git push origin "v$NEW_VERSION"
          else
            # Test run - use current version with pre-release suffix
            CURRENT_VERSION=$(poetry version -s)
            TIMESTAMP=$(date +"%Y%m%d%H%M%S")
            TEST_VERSION="${CURRENT_VERSION}rc${TIMESTAMP}"
            
            echo "version=$TEST_VERSION" >> $GITHUB_OUTPUT
            echo "🧪 Test run - using pre-release version: $TEST_VERSION"
          fi

      - name: Build final package
        if: steps.change-type.outputs.should_release == 'true'
        run: poetry build

      - name: Publish to TestPyPI
        if: steps.change-type.outputs.should_release == 'true' && steps.change-type.outputs.environment == 'test'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          
      - name: Publish to PyPI
        if: steps.change-type.outputs.should_release == 'true' && steps.change-type.outputs.environment == 'prod'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

      - name: Create GitHub Release
        if: steps.change-type.outputs.should_release == 'true' && steps.change-type.outputs.environment == 'prod'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version-bump.outputs.version }}
          name: Release ${{ steps.version-bump.outputs.version }}
          body: "Release version ${{ steps.version-bump.outputs.version }}"
          draft: false
          prerelease: false

      - name: Summary
        run: |
          if [ "${{ steps.change-type.outputs.is_release }}" == "true" ]; then
            echo "## Version Release Summary" >> $GITHUB_STEP_SUMMARY
            echo "- Released changelog for version: ${{ steps.release-version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
            echo "- Added PR #${{ steps.pr-info.outputs.pr_num }} to section: ${{ steps.change-type.outputs.section }}" >> $GITHUB_STEP_SUMMARY
            echo "- Release type detected: ${{ steps.change-type.outputs.release_type }}" >> $GITHUB_STEP_SUMMARY
            echo "- Environment: ${{ steps.change-type.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
            
            if [ "${{ steps.change-type.outputs.should_release }}" == "true" ]; then
              echo "- 🚀 **PyPI Release Triggered!**" >> $GITHUB_STEP_SUMMARY
              echo "- Published to: ${{ steps.change-type.outputs.environment == 'prod' && 'Production PyPI' || 'Test PyPI' }}" >> $GITHUB_STEP_SUMMARY
              if [ "${{ steps.change-type.outputs.environment }}" == "prod" ]; then
                echo "- Version bumped to: ${{ steps.version-bump.outputs.version }}" >> $GITHUB_STEP_SUMMARY
                echo "- GitHub release created: v${{ steps.version-bump.outputs.version }}" >> $GITHUB_STEP_SUMMARY
              else
                echo "- Test version: ${{ steps.version-bump.outputs.version }}" >> $GITHUB_STEP_SUMMARY
              fi
            else
              echo "- PyPI Release skipped (no environment label)" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "- Changelog released successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "## Changelog Update Summary" >> $GITHUB_STEP_SUMMARY
            echo "- Updated changelog for PR #${{ steps.pr-info.outputs.pr_num }}" >> $GITHUB_STEP_SUMMARY
            echo "- Added to section: ${{ steps.change-type.outputs.section }}" >> $GITHUB_STEP_SUMMARY
            echo "- Changelog updated successfully" >> $GITHUB_STEP_SUMMARY
          fi