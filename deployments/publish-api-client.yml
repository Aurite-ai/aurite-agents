name: Publish API Client to NPM

on:
  push:
    tags:
      - 'api-client-v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 0.3.7)'
        required: true
        type: string

jobs:
  publish:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Install dependencies
        run: |
          cd frontend
          npm ci
          
      - name: Validate package
        run: |
          cd frontend/packages/api-client
          npm run validate
          
      - name: Build package
        run: |
          cd frontend/packages/api-client
          npm run build
          
      - name: Extract version from tag or input
        id: version
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            VERSION=${GITHUB_REF#refs/tags/api-client-v}
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "tag_name=api-client-v$VERSION" >> $GITHUB_OUTPUT
          else
            VERSION="${{ github.event.inputs.version }}"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "tag_name=api-client-v$VERSION" >> $GITHUB_OUTPUT
          fi
          
      - name: Verify package version matches tag
        run: |
          cd frontend/packages/api-client
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          TAG_VERSION="${{ steps.version.outputs.version }}"
          if [ "$PACKAGE_VERSION" != "$TAG_VERSION" ]; then
            echo "Error: Package version ($PACKAGE_VERSION) does not match tag version ($TAG_VERSION)"
            exit 1
          fi
          echo "‚úÖ Version verification passed: $PACKAGE_VERSION"
          
      - name: Publish to NPM
        run: |
          cd frontend/packages/api-client
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Wait for NPM propagation
        run: |
          echo "Waiting 30 seconds for NPM CDN propagation..."
          sleep 30
          
      - name: Verify NPM publication
        run: |
          cd frontend/packages/api-client
          VERSION="${{ steps.version.outputs.version }}"
          MAX_ATTEMPTS=10
          ATTEMPT=1
          
          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "Attempt $ATTEMPT: Checking NPM registry..."
            if npm view @aurite-ai/api-client@$VERSION version > /dev/null 2>&1; then
              echo "‚úÖ Package @aurite-ai/api-client@$VERSION successfully published to NPM"
              break
            else
              if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
                echo "‚ùå Failed to verify NPM publication after $MAX_ATTEMPTS attempts"
                echo "This may be due to NPM CDN propagation delays. Check manually:"
                echo "npm view @aurite-ai/api-client@$VERSION"
                exit 1
              fi
              echo "Package not yet available, waiting 30 seconds..."
              sleep 30
              ATTEMPT=$((ATTEMPT + 1))
            fi
          done
          
      - name: Generate release notes
        id: release_notes
        run: |
          cd frontend/packages/api-client
          VERSION="${{ steps.version.outputs.version }}"
          
          # Extract changelog section for this version
          if grep -q "## \[$VERSION\]" CHANGELOG.md; then
            CHANGELOG_SECTION=$(sed -n "/## \[$VERSION\]/,/## \[/p" CHANGELOG.md | sed '$d' | tail -n +2)
          else
            CHANGELOG_SECTION="See [CHANGELOG.md](https://github.com/Aurite-ai/aurite-agents/blob/main/frontend/packages/api-client/CHANGELOG.md) for detailed changes."
          fi
          
          # Create release notes
          cat << EOF > release_notes.md
          ## üöÄ @aurite-ai/api-client v$VERSION
          
          $CHANGELOG_SECTION
          
          ## üì¶ Installation
          
          \`\`\`bash
          npm install @aurite-ai/api-client@$VERSION
          # or
          yarn add @aurite-ai/api-client@$VERSION
          # or
          pnpm add @aurite-ai/api-client@$VERSION
          \`\`\`
          
          ## üîó Links
          
          - **NPM Package**: https://www.npmjs.com/package/@aurite-ai/api-client
          - **Documentation**: https://github.com/Aurite-ai/aurite-agents/tree/main/frontend/packages/api-client
          - **Changelog**: https://github.com/Aurite-ai/aurite-agents/blob/main/frontend/packages/api-client/CHANGELOG.md
          
          ## ‚ú® Features
          
          - üîí Full TypeScript support with comprehensive type definitions
          - üîÑ Intelligent retry logic for network failures  
          - üìä Real-time streaming for agent responses
          - üõ°Ô∏è Comprehensive error handling with categorized error types
          - üß™ Extensive testing with 155+ unit and integration tests
          - üìñ Complete documentation with examples and API reference
          - üöÄ Zero runtime dependencies for optimal bundle size
          EOF
          
          echo "release_notes_file=release_notes.md" >> $GITHUB_OUTPUT
          
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.tag_name }}
          release_name: '@aurite-ai/api-client v${{ steps.version.outputs.version }}'
          body_path: frontend/packages/api-client/release_notes.md
          draft: false
          prerelease: false
          
      - name: Notify success
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          echo "üéâ Successfully published @aurite-ai/api-client@$VERSION to NPM!"
          echo "üì¶ NPM: https://www.npmjs.com/package/@aurite-ai/api-client"
          echo "üè∑Ô∏è GitHub Release: https://github.com/Aurite-ai/aurite-agents/releases/tag/api-client-v$VERSION"
          
      - name: Cleanup
        if: always()
        run: |
          cd frontend/packages/api-client
          rm -f release_notes.md

  # Optional: Notify team on failure
  notify-failure:
    runs-on: ubuntu-latest
    needs: publish
    if: failure()
    
    steps:
      - name: Notify failure
        run: |
          echo "‚ùå API Client publication failed!"
          echo "Check the workflow logs for details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          # Add Slack/Discord notification here if needed
