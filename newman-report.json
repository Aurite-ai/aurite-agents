{
  "collection": {
    "_": {
      "postman_id": "a1b2c3d4-e5f6-7890-1234-abcdef123456"
    },
    "item": [
      {
        "id": "2f2c9fd9-9e91-41c4-8fba-127fc8be1cef",
        "name": "Health Check",
        "request": {
          "description": {
            "content": "Checks if the server is running and responsive.",
            "type": "text/plain"
          },
          "url": {
            "path": [
              "health"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "b0856de0-af9b-4665-abb8-6278bd257ff0",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "pm.test(\"Status code is 200\", function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test(\"Response body is correct\", function () {",
                "    var jsonData = pm.response.json();",
                "    pm.expect(jsonData).to.eql({status: 'ok'});",
                "});"
              ],
              "_lastExecutionId": "fa83e4d1-27a5-4988-8576-7f9430877cec"
            }
          }
        ]
      },
      {
        "id": "23624227-cf31-493f-869d-ea1e6335b98e",
        "name": "Get Status",
        "request": {
          "description": {
            "content": "Checks the initialization status of the MCP Host (requires API Key).",
            "type": "text/plain"
          },
          "url": {
            "path": [
              "status"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "X-API-Key",
              "value": "{{api_key}}"
            }
          ],
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "8f7d248a-868e-4482-825d-bcff0aa241d5",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "pm.test(\"Status code is 200\", function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test(\"Response body indicates initialized and active manager\", function () {",
                "    var jsonData = pm.response.json();",
                "    pm.expect(jsonData).to.eql({status: 'initialized', manager_status: 'active'});",
                "});"
              ],
              "_lastExecutionId": "0d2b32f4-bc49-4ab6-95cf-4291f05c8e74"
            }
          }
        ]
      },
      {
        "id": "3f1eed7f-fb3d-4727-97d1-ee5f7a0fcb64",
        "name": "Execute Agent (Weather Agent)",
        "request": {
          "description": {
            "content": "Executes the 'Weather Agent' defined in the config.",
            "type": "text/plain"
          },
          "url": {
            "path": [
              "agents",
              "Weather Agent",
              "execute"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "X-API-Key",
              "value": "{{api_key}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"user_message\": \"What is the weather in San Francisco?\"\n}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "4ee31283-80f0-4358-8f53-4494c43cfe41",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "pm.test(\"Status code is 200\", function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test(\"Response has final_response\", function () {",
                "    var jsonData = pm.response.json();",
                "    pm.expect(jsonData).to.have.property('final_response');",
                "    pm.expect(jsonData.final_response).to.not.be.null;",
                "});"
              ],
              "_lastExecutionId": "1eff3cf2-743e-4fac-a039-3baf3bbd7680"
            }
          }
        ]
      },
      {
        "id": "f2bbcbbc-257d-4bc6-ab82-9278c918d298",
        "name": "Execute Simple Workflow (Example)",
        "request": {
          "description": {
            "content": "Executes the example simple workflow defined in the config.",
            "type": "text/plain"
          },
          "url": {
            "path": [
              "workflows",
              "Example workflow using weather and planning servers",
              "execute"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "X-API-Key",
              "value": "{{api_key}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"initial_user_message\": \"Check weather in SF and save plan.\"\n}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "f3ee620f-c6ea-4871-a586-e82d38f4c8bc",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "pm.test(\"Status code is 200\", function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test(\"Response indicates completed status\", function () {",
                "    var jsonData = pm.response.json();",
                "    pm.expect(jsonData.status).to.eql('completed');",
                "    pm.expect(jsonData.error).to.be.null;",
                "    pm.expect(jsonData.final_message).to.be.a('string');",
                "});"
              ],
              "_lastExecutionId": "c8ff5501-0109-4b3f-936b-bebbdac77614"
            }
          }
        ]
      },
      {
        "id": "80c147a8-57aa-47da-a89c-fa23e475c68c",
        "name": "Execute Custom Workflow (Example)",
        "request": {
          "description": {
            "content": "Executes the example custom workflow defined in the config.",
            "type": "text/plain"
          },
          "url": {
            "path": [
              "custom_workflows",
              "ExampleCustom",
              "execute"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "X-API-Key",
              "value": "{{api_key}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"initial_input\": \"Run the example custom workflow for London\"\n}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "f766f1c4-ddd7-40dd-9898-b36687c248c3",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "pm.test(\"Status code is 200\", function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test(\"Response indicates completed status and has result\", function () {",
                "    var jsonData = pm.response.json();",
                "    pm.expect(jsonData.status).to.eql('completed');",
                "    pm.expect(jsonData.error).to.be.null;",
                "    pm.expect(jsonData.result).to.exist;",
                "    // Add more specific result checks if needed",
                "    pm.expect(jsonData.result.status).to.eql('success');",
                "});"
              ],
              "_lastExecutionId": "2a6a64db-0130-47dc-8b42-ba208e49e1b2"
            }
          }
        ]
      },
      {
        "id": "364a23b1-fd93-4972-8fff-e6f8b2ff1c87",
        "name": "[Dynamic] Register Client (Success)",
        "request": {
          "description": {
            "content": "Registers a new client dynamically.",
            "type": "text/plain"
          },
          "url": {
            "path": [
              "clients",
              "register"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "X-API-Key",
              "value": "{{api_key}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"client_id\": \"dynamic_test_client\",\n    \"server_path\": \"tests/fixtures/servers/weather_mcp_server.py\",\n    \"roots\": [],\n    \"capabilities\": [\"tools\"],\n    \"timeout\": 10.0,\n    \"routing_weight\": 0.5,\n    \"exclude\": null\n}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "45374802-8c11-4090-82a4-826ac1bd53e1",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "pm.test(\"Status code is 201 Created\", function () {",
                "    pm.response.to.have.status(201);",
                "});",
                "",
                "pm.test(\"Response body is correct\", function () {",
                "    var jsonData = pm.response.json();",
                "    pm.expect(jsonData).to.eql({status: 'success', client_id: 'dynamic_test_client'});",
                "});"
              ],
              "_lastExecutionId": "74e9bc1d-562d-4a82-95b1-dec7956f5be1"
            }
          }
        ]
      },
      {
        "id": "ac16489e-2797-46a1-a088-8dc85303a874",
        "name": "[Dynamic] Register Client (Duplicate)",
        "request": {
          "description": {
            "content": "Attempts to register a client with an ID that already exists.",
            "type": "text/plain"
          },
          "url": {
            "path": [
              "clients",
              "register"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "X-API-Key",
              "value": "{{api_key}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"client_id\": \"dynamic_test_client\",\n    \"server_path\": \"tests/fixtures/servers/weather_mcp_server.py\",\n    \"roots\": [],\n    \"capabilities\": [\"tools\"],\n    \"timeout\": 10.0,\n    \"routing_weight\": 0.5,\n    \"exclude\": null\n}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "26669c23-e5db-43df-9a06-41dac812001f",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "pm.test(\"Status code is 409 Conflict\", function () {",
                "    pm.response.to.have.status(409);",
                "});",
                "",
                "pm.test(\"Response body contains error detail\", function () {",
                "    var jsonData = pm.response.json();",
                "    pm.expect(jsonData).to.have.property('detail');",
                "    pm.expect(jsonData.detail).to.contain('already registered');",
                "});"
              ],
              "_lastExecutionId": "b853d660-b5ea-474e-89f8-1396107fb410"
            }
          }
        ]
      },
      {
        "id": "0f4da448-c944-4b4a-8cfb-a0aa5ce1710e",
        "name": "[Dynamic] Register Agent (Success)",
        "request": {
          "description": {
            "content": "Registers a new agent dynamically.",
            "type": "text/plain"
          },
          "url": {
            "path": [
              "agents",
              "register"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "X-API-Key",
              "value": "{{api_key}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"name\": \"Dynamic Test Agent\",\n    \"client_ids\": [\"dynamic_test_client\", \"weather_server\"],\n    \"system_prompt\": \"This is a dynamically registered agent.\",\n    \"model\": \"claude-3-haiku-20240307\",\n    \"temperature\": 0.5,\n    \"max_tokens\": 100,\n    \"max_iterations\": 3,\n    \"include_history\": false\n}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "19c166ff-340b-440d-a0af-79d37fc63f77",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "pm.test(\"Status code is 201 Created\", function () {",
                "    pm.response.to.have.status(201);",
                "});",
                "",
                "pm.test(\"Response body is correct\", function () {",
                "    var jsonData = pm.response.json();",
                "    pm.expect(jsonData).to.eql({status: 'success', agent_name: 'Dynamic Test Agent'});",
                "});"
              ],
              "_lastExecutionId": "96cf68a6-a699-4e8e-93bc-b0d967e18761"
            }
          }
        ]
      },
      {
        "id": "b76f02a1-633f-4351-9ce4-5cf0bc52ca3f",
        "name": "[Dynamic] Register Agent (Duplicate Name)",
        "request": {
          "description": {
            "content": "Attempts to register an agent with a name that already exists.",
            "type": "text/plain"
          },
          "url": {
            "path": [
              "agents",
              "register"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "X-API-Key",
              "value": "{{api_key}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"name\": \"Dynamic Test Agent\",\n    \"client_ids\": [\"weather_server\"],\n    \"system_prompt\": \"Attempting duplicate registration.\"\n}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "08e43143-01fd-4c26-ba6f-2b4471206ebb",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "pm.test(\"Status code is 409 Conflict\", function () {",
                "    pm.response.to.have.status(409);",
                "});",
                "",
                "pm.test(\"Response body contains error detail\", function () {",
                "    var jsonData = pm.response.json();",
                "    pm.expect(jsonData).to.have.property('detail');",
                "    pm.expect(jsonData.detail).to.contain('already registered');",
                "});"
              ],
              "_lastExecutionId": "40bb82b1-2e54-4192-8a11-915684c58c41"
            }
          }
        ]
      },
      {
        "id": "d874a84c-041f-405a-b609-d30097501e3b",
        "name": "[Dynamic] Register Agent (Invalid Client ID)",
        "request": {
          "description": {
            "content": "Attempts to register an agent referencing a client ID that does not exist.",
            "type": "text/plain"
          },
          "url": {
            "path": [
              "agents",
              "register"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "X-API-Key",
              "value": "{{api_key}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"name\": \"Agent With Invalid Client\",\n    \"client_ids\": [\"non_existent_client\"],\n    \"system_prompt\": \"This registration should fail.\"\n}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "384d302c-76f6-42cd-8fdc-cc6092c180c5",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "pm.test(\"Status code is 400 Bad Request\", function () {",
                "    pm.response.to.have.status(400);",
                "});",
                "",
                "pm.test(\"Response body contains error detail\", function () {",
                "    var jsonData = pm.response.json();",
                "    pm.expect(jsonData).to.have.property('detail');",
                "    pm.expect(jsonData.detail).to.contain('not found');",
                "});"
              ],
              "_lastExecutionId": "21d4d2a8-8384-431a-b321-bd9be8874ee9"
            }
          }
        ]
      },
      {
        "id": "285374a2-e1b9-4457-a295-23a5dbd817b6",
        "name": "[Dynamic] Register Workflow (Success)",
        "request": {
          "description": {
            "content": "Registers a new workflow dynamically.",
            "type": "text/plain"
          },
          "url": {
            "path": [
              "workflows",
              "register"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "X-API-Key",
              "value": "{{api_key}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"name\": \"Dynamic Test Workflow\",\n    \"steps\": [\"Dynamic Test Agent\", \"Weather Agent\"],\n    \"description\": \"A workflow registered dynamically.\"\n}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "b633ea8c-8e8c-44b9-bf88-dc8bfe81cefc",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "pm.test(\"Status code is 201 Created\", function () {",
                "    pm.response.to.have.status(201);",
                "});",
                "",
                "pm.test(\"Response body is correct\", function () {",
                "    var jsonData = pm.response.json();",
                "    pm.expect(jsonData).to.eql({status: 'success', workflow_name: 'Dynamic Test Workflow'});",
                "});"
              ],
              "_lastExecutionId": "753bb2a5-1a7c-43ef-bded-7000529f22d2"
            }
          }
        ]
      },
      {
        "id": "cd43a27a-1551-4dfa-8991-b12cc4a42cee",
        "name": "[Dynamic] Register Workflow (Duplicate Name)",
        "request": {
          "description": {
            "content": "Attempts to register a workflow with a name that already exists.",
            "type": "text/plain"
          },
          "url": {
            "path": [
              "workflows",
              "register"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "X-API-Key",
              "value": "{{api_key}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"name\": \"Dynamic Test Workflow\",\n    \"steps\": [\"Weather Agent\"],\n    \"description\": \"Attempting duplicate registration.\"\n}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "f933e2b0-9794-4996-af82-aad0c42047a2",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "pm.test(\"Status code is 409 Conflict\", function () {",
                "    pm.response.to.have.status(409);",
                "});",
                "",
                "pm.test(\"Response body contains error detail\", function () {",
                "    var jsonData = pm.response.json();",
                "    pm.expect(jsonData).to.have.property('detail');",
                "    pm.expect(jsonData.detail).to.contain('already registered');",
                "});"
              ],
              "_lastExecutionId": "2ff3d107-62c1-4df1-b411-7338c99feb17"
            }
          }
        ]
      },
      {
        "id": "a851ffcc-e090-4f1e-a6dc-90fdce5168fb",
        "name": "[Dynamic] Register Workflow (Invalid Agent Name)",
        "request": {
          "description": {
            "content": "Attempts to register a workflow referencing an agent name that does not exist.",
            "type": "text/plain"
          },
          "url": {
            "path": [
              "workflows",
              "register"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "X-API-Key",
              "value": "{{api_key}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"name\": \"Workflow With Invalid Agent\",\n    \"steps\": [\"Non_Existent_Agent\"],\n    \"description\": \"This registration should fail.\"\n}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "39ac06eb-66d7-41fd-8b13-99c7cb679c29",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "pm.test(\"Status code is 400 Bad Request\", function () {",
                "    pm.response.to.have.status(400);",
                "});",
                "",
                "pm.test(\"Response body contains error detail\", function () {",
                "    var jsonData = pm.response.json();",
                "    pm.expect(jsonData).to.have.property('detail');",
                "    pm.expect(jsonData.detail).to.contain('not found');",
                "});"
              ],
              "_lastExecutionId": "9cee38df-0e7e-44f2-bd14-a8980214a59d"
            }
          }
        ]
      }
    ],
    "event": [],
    "variable": [
      {
        "description": {
          "content": "Base URL of the running FastAPI server",
          "type": "text/plain"
        },
        "type": "string",
        "value": "http://localhost:8000",
        "key": "base_url"
      },
      {
        "description": {
          "content": "API Key for accessing protected endpoints (Set this in your environment)",
          "type": "text/plain"
        },
        "type": "any",
        "value": "YOUR_API_KEY_HERE",
        "key": "api_key"
      }
    ],
    "info": {
      "_postman_id": "a1b2c3d4-e5f6-7890-1234-abcdef123456",
      "name": "Aurite MCP Server",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "Collection for testing the Aurite MCP FastAPI server endpoints.",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment",
      "postman_exported_at": "2025-04-05T19:47:00.000Z",
      "postman_exported_using": "Postman/10.x.x"
    },
    "id": "e1f2a3b4-c5d6-7890-abcd-ef1234567890",
    "name": "Aurite MCP Local Dev",
    "values": [
      {
        "type": "any",
        "value": "http://localhost:8000",
        "key": "base_url"
      },
      {
        "type": "any",
        "value": "RwkWJFhApciiUSyH3B/Ad6T46kIxbu9gtAU",
        "key": "api_key"
      }
    ]
  },
  "globals": {
    "id": "f238ed72-bb54-4b7f-a7e6-79b183475b9b",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 13,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 13,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 13,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 13,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 13,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 26,
        "pending": 0,
        "failed": 0
      },
      "testScripts": {
        "total": 13,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 0,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 3895.230769230769,
      "responseMin": 4,
      "responseMax": 28127,
      "responseSd": 8026.729664103041,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1744229279545,
      "completed": 1744229330395
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 13,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "34fe9906-5fdb-495c-96ab-d454acaadc86",
          "httpRequestId": "fd21dbc4-197e-4e6d-8aa7-9aa1d454dbe4"
        },
        "item": {
          "id": "2f2c9fd9-9e91-41c4-8fba-127fc8be1cef",
          "name": "Health Check",
          "request": {
            "description": {
              "content": "Checks if the server is running and responsive.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b0856de0-af9b-4665-abb8-6278bd257ff0",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response body is correct\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.eql({status: 'ok'});",
                  "});"
                ],
                "_lastExecutionId": "fa83e4d1-27a5-4988-8576-7f9430877cec"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Checks if the server is running and responsive.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "health"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "84e23b46-6055-4e15-a310-45636758dd85",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "90a071a4-7b35-4247-a881-08731bb8ea1a",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Wed, 09 Apr 2025 20:07:58 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "15"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              111,
              107,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 19,
          "responseSize": 15
        },
        "id": "2f2c9fd9-9e91-41c4-8fba-127fc8be1cef",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response body is correct",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "70cd41d1-f259-4e6f-ba03-ddd8de956e2d",
          "length": 13,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "7cc96c8b-8c12-4c81-8077-059f17f545c7"
        },
        "item": {
          "id": "23624227-cf31-493f-869d-ea1e6335b98e",
          "name": "Get Status",
          "request": {
            "description": {
              "content": "Checks the initialization status of the MCP Host (requires API Key).",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "status"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{api_key}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8f7d248a-868e-4482-825d-bcff0aa241d5",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response body indicates initialized and active manager\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.eql({status: 'initialized', manager_status: 'active'});",
                  "});"
                ],
                "_lastExecutionId": "0d2b32f4-bc49-4ab6-95cf-4291f05c8e74"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Checks the initialization status of the MCP Host (requires API Key).",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "status"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "X-API-Key",
              "value": "RwkWJFhApciiUSyH3B/Ad6T46kIxbu9gtAU"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6bd5ab31-71b5-4117-8b04-e5fe4804acf2",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "5b49e812-29c1-4b3e-a6f5-263354999ba5",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Wed, 09 Apr 2025 20:07:58 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "50"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              105,
              110,
              105,
              116,
              105,
              97,
              108,
              105,
              122,
              101,
              100,
              34,
              44,
              34,
              109,
              97,
              110,
              97,
              103,
              101,
              114,
              95,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 50
        },
        "id": "23624227-cf31-493f-869d-ea1e6335b98e",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response body indicates initialized and active manager",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "0a52b100-1976-481a-97b5-8e343bce6223",
          "length": 13,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "ff8ae0d6-dc3a-41cc-bc03-3f742b1e9b24"
        },
        "item": {
          "id": "3f1eed7f-fb3d-4727-97d1-ee5f7a0fcb64",
          "name": "Execute Agent (Weather Agent)",
          "request": {
            "description": {
              "content": "Executes the 'Weather Agent' defined in the config.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "agents",
                "Weather Agent",
                "execute"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{api_key}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"user_message\": \"What is the weather in San Francisco?\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4ee31283-80f0-4358-8f53-4494c43cfe41",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has final_response\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('final_response');",
                  "    pm.expect(jsonData.final_response).to.not.be.null;",
                  "});"
                ],
                "_lastExecutionId": "1eff3cf2-743e-4fac-a039-3baf3bbd7680"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Executes the 'Weather Agent' defined in the config.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "agents",
              "Weather%20Agent",
              "execute"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "X-API-Key",
              "value": "RwkWJFhApciiUSyH3B/Ad6T46kIxbu9gtAU"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b185cdf4-660f-4d8e-ad69-37d250e62c9d",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "63",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"user_message\": \"What is the weather in San Francisco?\"\n}"
          }
        },
        "response": {
          "id": "dd332803-5e8a-470c-aa96-e3b30a211dad",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Wed, 09 Apr 2025 20:07:58 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "1955"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              91,
              123,
              34,
              114,
              111,
              108,
              101,
              34,
              58,
              34,
              97,
              115,
              115,
              105,
              115,
              116,
              97,
              110,
              116,
              34,
              44,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              91,
              123,
              34,
              99,
              105,
              116,
              97,
              116,
              105,
              111,
              110,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              101,
              120,
              116,
              34,
              58,
              34,
              60,
              116,
              104,
              105,
              110,
              107,
              105,
              110,
              103,
              62,
              92,
              110,
              84,
              111,
              32,
              103,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              119,
              101,
              97,
              116,
              104,
              101,
              114,
              32,
              102,
              111,
              114,
              32,
              83,
              97,
              110,
              32,
              70,
              114,
              97,
              110,
              99,
              105,
              115,
              99,
              111,
              44,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              108,
              101,
              118,
              97,
              110,
              116,
              32,
              116,
              111,
              111,
              108,
              32,
              116,
              111,
              32,
              117,
              115,
              101,
              32,
              105,
              115,
              32,
              119,
              101,
              97,
              116,
              104,
              101,
              114,
              95,
              108,
              111,
              111,
              107,
              117,
              112,
              46,
              32,
              76,
              101,
              116,
              39,
              115,
              32,
              108,
              111,
              111,
              107,
              32,
              97,
              116,
              32,
              105,
              116,
              115,
              32,
              112,
              97,
              114,
              97,
              109,
              101,
              116,
              101,
              114,
              115,
              58,
              92,
              110,
              92,
              110,
              119,
              101,
              97,
              116,
              104,
              101,
              114,
              95,
              108,
              111,
              111,
              107,
              117,
              112,
              58,
              92,
              110,
              82,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              32,
              112,
              97,
              114,
              97,
              109,
              101,
              116,
              101,
              114,
              115,
              58,
              92,
              110,
              45,
              32,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              58,
              32,
              84,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              100,
              32,
              116,
              104,
              105,
              115,
              32,
              40,
              92,
              34,
              83,
              97,
              110,
              32,
              70,
              114,
              97,
              110,
              99,
              105,
              115,
              99,
              111,
              92,
              34,
              41,
              92,
              110,
              79,
              112,
              116,
              105,
              111,
              110,
              97,
              108,
              32,
              112,
              97,
              114,
              97,
              109,
              101,
              116,
              101,
              114,
              115,
              58,
              32,
              92,
              110,
              45,
              32,
              117,
              110,
              105,
              116,
              115,
              58,
              32,
              84,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              100,
              105,
              100,
              32,
              110,
              111,
              116,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              121,
              44,
              32,
              115,
              111,
              32,
              119,
              101,
              32,
              99,
              97,
              110,
              32,
              117,
              115,
              101,
              32,
              116,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              118,
              97,
              108,
              117,
              101,
              32,
              111,
              102,
              32,
              92,
              34,
              109,
              101,
              116,
              114,
              105,
              99,
              92,
              34,
              92,
              110,
              92,
              110,
              87,
              101,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              108,
              108,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              32,
              105,
              110,
              102,
              111,
              114,
              109,
              97,
              116,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              109,
              97,
              107,
              101,
              32,
              116,
              104,
              101,
              32,
              65,
              80,
              73,
              32,
              99,
              97,
              108,
              108,
              44,
              32,
              115,
              111,
              32,
              108,
              101,
              116,
              39,
              115,
              32,
              112,
              114,
              111,
              99,
              101,
              101,
              100,
              32,
              119,
              105,
              116,
              104,
              32,
              116,
              104,
              97,
              116,
              46,
              92,
              110,
              60,
              47,
              116,
              104,
              105,
              110,
              107,
              105,
              110,
              103,
              62,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              116,
              101,
              120,
              116,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              116,
              111,
              111,
              108,
              117,
              95,
              48,
              49,
              81,
              99,
              122,
              106,
              89,
              74,
              112,
              81,
              71,
              109,
              112,
              98,
              110,
              103,
              77,
              120,
              88,
              51,
              117,
              65,
              55,
              74,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              123,
              34,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              83,
              97,
              110,
              32,
              70,
              114,
              97,
              110,
              99,
              105,
              115,
              99,
              111,
              34,
              125,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              119,
              101,
              97,
              116,
              104,
              101,
              114,
              95,
              108,
              111,
              111,
              107,
              117,
              112,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              116,
              111,
              111,
              108,
              95,
              117,
              115,
              101,
              34,
              125,
              93,
              125,
              44,
              123,
              34,
              114,
              111,
              108,
              101,
              34,
              58,
              34,
              117,
              115,
              101,
              114,
              34,
              44,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              91,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              116,
              111,
              111,
              108,
              95,
              114,
              101,
              115,
              117,
              108,
              116,
              34,
              44,
              34,
              116,
              111,
              111,
              108,
              95,
              117,
              115,
              101,
              95,
              105,
              100,
              34,
              58,
              34,
              116,
              111,
              111,
              108,
              117,
              95,
              48,
              49,
              81,
              99,
              122,
              106,
              89,
              74,
              112,
              81,
              71,
              109,
              112,
              98,
              110,
              103,
              77,
              120,
              88,
              51,
              117,
              65,
              55,
              74,
              34,
              44,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              91,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              116,
              101,
              120,
              116,
              34,
              44,
              34,
              116,
              101,
              120,
              116,
              34,
              58,
              34,
              87,
              101,
              97,
              116,
              104,
              101,
              114,
              32,
              102,
              111,
              114,
              32,
              83,
              97,
              110,
              32,
              70,
              114,
              97,
              110,
              99,
              105,
              115,
              99,
              111,
              58,
              92,
              110,
              84,
              101,
              109,
              112,
              101,
              114,
              97,
              116,
              117,
              114,
              101,
              58,
              32,
              49,
              56,
              194,
              176,
              67,
              92,
              110,
              67,
              111,
              110,
              100,
              105,
              116,
              105,
              111,
              110,
              58,
              32,
              70,
              111,
              103,
              103,
              121,
              92,
              110,
              72,
              117,
              109,
              105,
              100,
              105,
              116,
              121,
              58,
              32,
              56,
              53,
              37,
              34,
              125,
              93,
              125,
              93,
              125,
              44,
              123,
              34,
              114,
              111,
              108,
              101,
              34,
              58,
              34,
              97,
              115,
              115,
              105,
              115,
              116,
              97,
              110,
              116,
              34,
              44,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              91,
              123,
              34,
              99,
              105,
              116,
              97,
              116,
              105,
              111,
              110,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              101,
              120,
              116,
              34,
              58,
              34,
              66,
              97,
              115,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              119,
              101,
              97,
              116,
              104,
              101,
              114,
              32,
              108,
              111,
              111,
              107,
              117,
              112,
              44,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              114,
              114,
              101,
              110,
              116,
              32,
              119,
              101,
              97,
              116,
              104,
              101,
              114,
              32,
              105,
              110,
              32,
              83,
              97,
              110,
              32,
              70,
              114,
              97,
              110,
              99,
              105,
              115,
              99,
              111,
              32,
              105,
              115,
              58,
              92,
              110,
              45,
              32,
              84,
              101,
              109,
              112,
              101,
              114,
              97,
              116,
              117,
              114,
              101,
              58,
              32,
              49,
              56,
              194,
              176,
              67,
              32,
              40,
              54,
              52,
              194,
              176,
              70,
              41,
              32,
              92,
              110,
              45,
              32,
              67,
              111,
              110,
              100,
              105,
              116,
              105,
              111,
              110,
              58,
              32,
              70,
              111,
              103,
              103,
              121,
              92,
              110,
              45,
              32,
              72,
              117,
              109,
              105,
              100,
              105,
              116,
              121,
              58,
              32,
              56,
              53,
              37,
              92,
              110,
              92,
              110,
              83,
              97,
              110,
              32,
              70,
              114,
              97,
              110,
              99,
              105,
              115,
              99,
              111,
              32,
              104,
              97,
              115,
              32,
              97,
              32,
              99,
              111,
              111,
              108,
              44,
              32,
              102,
              111,
              103,
              103,
              121,
              32,
              109,
              111,
              114,
              110,
              105,
              110,
              103,
              32,
              116,
              111,
              100,
              97,
              121,
              32,
              119,
              105,
              116,
              104,
              32,
              116,
              101,
              109,
              112,
              101,
              114,
              97,
              116,
              117,
              114,
              101,
              115,
              32,
              97,
              114,
              111,
              117,
              110,
              100,
              32,
              49,
              56,
              32,
              100,
              101,
              103,
              114,
              101,
              101,
              115,
              32,
              67,
              101,
              108,
              115,
              105,
              117,
              115,
              32,
              111,
              114,
              32,
              54,
              52,
              32,
              100,
              101,
              103,
              114,
              101,
              101,
              115,
              32,
              70,
              97,
              104,
              114,
              101,
              110,
              104,
              101,
              105,
              116,
              46,
              32,
              84,
              104,
              101,
              114,
              101,
              32,
              105,
              115,
              32,
              104,
              105,
              103,
              104,
              32,
              104,
              117,
              109,
              105,
              100,
              105,
              116,
              121,
              32,
              97,
              116,
              32,
              56,
              53,
              37,
              46,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              116,
              101,
              120,
              116,
              34,
              125,
              93,
              125,
              93,
              44,
              34,
              102,
              105,
              110,
              97,
              108,
              95,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              109,
              115,
              103,
              95,
              48,
              49,
              69,
              119,
              83,
              111,
              77,
              71,
              76,
              50,
              72,
              119,
              51,
              52,
              102,
              114,
              87,
              74,
              55,
              70,
              76,
              118,
              77,
              82,
              34,
              44,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              91,
              123,
              34,
              99,
              105,
              116,
              97,
              116,
              105,
              111,
              110,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              101,
              120,
              116,
              34,
              58,
              34,
              66,
              97,
              115,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              119,
              101,
              97,
              116,
              104,
              101,
              114,
              32,
              108,
              111,
              111,
              107,
              117,
              112,
              44,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              114,
              114,
              101,
              110,
              116,
              32,
              119,
              101,
              97,
              116,
              104,
              101,
              114,
              32,
              105,
              110,
              32,
              83,
              97,
              110,
              32,
              70,
              114,
              97,
              110,
              99,
              105,
              115,
              99,
              111,
              32,
              105,
              115,
              58,
              92,
              110,
              45,
              32,
              84,
              101,
              109,
              112,
              101,
              114,
              97,
              116,
              117,
              114,
              101,
              58,
              32,
              49,
              56,
              194,
              176,
              67,
              32,
              40,
              54,
              52,
              194,
              176,
              70,
              41,
              32,
              92,
              110,
              45,
              32,
              67,
              111,
              110,
              100,
              105,
              116,
              105,
              111,
              110,
              58,
              32,
              70,
              111,
              103,
              103,
              121,
              92,
              110,
              45,
              32,
              72,
              117,
              109,
              105,
              100,
              105,
              116,
              121,
              58,
              32,
              56,
              53,
              37,
              92,
              110,
              92,
              110,
              83,
              97,
              110,
              32,
              70,
              114,
              97,
              110,
              99,
              105,
              115,
              99,
              111,
              32,
              104,
              97,
              115,
              32,
              97,
              32,
              99,
              111,
              111,
              108,
              44,
              32,
              102,
              111,
              103,
              103,
              121,
              32,
              109,
              111,
              114,
              110,
              105,
              110,
              103,
              32,
              116,
              111,
              100,
              97,
              121,
              32,
              119,
              105,
              116,
              104,
              32,
              116,
              101,
              109,
              112,
              101,
              114,
              97,
              116,
              117,
              114,
              101,
              115,
              32,
              97,
              114,
              111,
              117,
              110,
              100,
              32,
              49,
              56,
              32,
              100,
              101,
              103,
              114,
              101,
              101,
              115,
              32,
              67,
              101,
              108,
              115,
              105,
              117,
              115,
              32,
              111,
              114,
              32,
              54,
              52,
              32,
              100,
              101,
              103,
              114,
              101,
              101,
              115,
              32,
              70,
              97,
              104,
              114,
              101,
              110,
              104,
              101,
              105,
              116,
              46,
              32,
              84,
              104,
              101,
              114,
              101,
              32,
              105,
              115,
              32,
              104,
              105,
              103,
              104,
              32,
              104,
              117,
              109,
              105,
              100,
              105,
              116,
              121,
              32,
              97,
              116,
              32,
              56,
              53,
              37,
              46,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              116,
              101,
              120,
              116,
              34,
              125,
              93,
              44,
              34,
              109,
              111,
              100,
              101,
              108,
              34,
              58,
              34,
              99,
              108,
              97,
              117,
              100,
              101,
              45,
              51,
              45,
              111,
              112,
              117,
              115,
              45,
              50,
              48,
              50,
              52,
              48,
              50,
              50,
              57,
              34,
              44,
              34,
              114,
              111,
              108,
              101,
              34,
              58,
              34,
              97,
              115,
              115,
              105,
              115,
              116,
              97,
              110,
              116,
              34,
              44,
              34,
              115,
              116,
              111,
              112,
              95,
              114,
              101,
              97,
              115,
              111,
              110,
              34,
              58,
              34,
              101,
              110,
              100,
              95,
              116,
              117,
              114,
              110,
              34,
              44,
              34,
              115,
              116,
              111,
              112,
              95,
              115,
              101,
              113,
              117,
              101,
              110,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              44,
              34,
              117,
              115,
              97,
              103,
              101,
              34,
              58,
              123,
              34,
              99,
              97,
              99,
              104,
              101,
              95,
              99,
              114,
              101,
              97,
              116,
              105,
              111,
              110,
              95,
              105,
              110,
              112,
              117,
              116,
              95,
              116,
              111,
              107,
              101,
              110,
              115,
              34,
              58,
              48,
              44,
              34,
              99,
              97,
              99,
              104,
              101,
              95,
              114,
              101,
              97,
              100,
              95,
              105,
              110,
              112,
              117,
              116,
              95,
              116,
              111,
              107,
              101,
              110,
              115,
              34,
              58,
              48,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              95,
              116,
              111,
              107,
              101,
              110,
              115,
              34,
              58,
              49,
              50,
              56,
              51,
              44,
              34,
              111,
              117,
              116,
              112,
              117,
              116,
              95,
              116,
              111,
              107,
              101,
              110,
              115,
              34,
              58,
              56,
              53,
              125,
              125,
              44,
              34,
              116,
              111,
              111,
              108,
              95,
              117,
              115,
              101,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              116,
              111,
              111,
              108,
              117,
              95,
              48,
              49,
              81,
              99,
              122,
              106,
              89,
              74,
              112,
              81,
              71,
              109,
              112,
              98,
              110,
              103,
              77,
              120,
              88,
              51,
              117,
              65,
              55,
              74,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              119,
              101,
              97,
              116,
              104,
              101,
              114,
              95,
              108,
              111,
              111,
              107,
              117,
              112,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              123,
              34,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              83,
              97,
              110,
              32,
              70,
              114,
              97,
              110,
              99,
              105,
              115,
              99,
              111,
              34,
              125,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 10893,
          "responseSize": 1955
        },
        "id": "3f1eed7f-fb3d-4727-97d1-ee5f7a0fcb64",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response has final_response",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "41568373-5124-4d1c-b63d-738992275d9c",
          "length": 13,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "63b70d97-599b-48d2-a2f6-bddbdb225454"
        },
        "item": {
          "id": "f2bbcbbc-257d-4bc6-ab82-9278c918d298",
          "name": "Execute Simple Workflow (Example)",
          "request": {
            "description": {
              "content": "Executes the example simple workflow defined in the config.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "workflows",
                "Example workflow using weather and planning servers",
                "execute"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{api_key}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"initial_user_message\": \"Check weather in SF and save plan.\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f3ee620f-c6ea-4871-a586-e82d38f4c8bc",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response indicates completed status\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql('completed');",
                  "    pm.expect(jsonData.error).to.be.null;",
                  "    pm.expect(jsonData.final_message).to.be.a('string');",
                  "});"
                ],
                "_lastExecutionId": "c8ff5501-0109-4b3f-936b-bebbdac77614"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Executes the example simple workflow defined in the config.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "workflows",
              "Example%20workflow%20using%20weather%20and%20planning%20servers",
              "execute"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "X-API-Key",
              "value": "RwkWJFhApciiUSyH3B/Ad6T46kIxbu9gtAU"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c88d6470-41e7-4094-a3d8-c2d5b8e69e5f",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "68",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"initial_user_message\": \"Check weather in SF and save plan.\"\n}"
          }
        },
        "response": {
          "id": "9b3cc1d6-8cac-434a-89d7-f9df76a097e7",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Wed, 09 Apr 2025 20:07:58 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "1610"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              119,
              111,
              114,
              107,
              102,
              108,
              111,
              119,
              95,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              119,
              111,
              114,
              107,
              102,
              108,
              111,
              119,
              32,
              117,
              115,
              105,
              110,
              103,
              32,
              119,
              101,
              97,
              116,
              104,
              101,
              114,
              32,
              97,
              110,
              100,
              32,
              112,
              108,
              97,
              110,
              110,
              105,
              110,
              103,
              32,
              115,
              101,
              114,
              118,
              101,
              114,
              115,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              44,
              34,
              102,
              105,
              110,
              97,
              108,
              95,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              60,
              116,
              104,
              105,
              110,
              107,
              105,
              110,
              103,
              62,
              92,
              110,
              84,
              104,
              101,
              32,
              115,
              97,
              118,
              101,
              95,
              112,
              108,
              97,
              110,
              32,
              116,
              111,
              111,
              108,
              32,
              105,
              115,
              32,
              114,
              101,
              108,
              101,
              118,
              97,
              110,
              116,
              32,
              102,
              111,
              114,
              32,
              115,
              97,
              118,
              105,
              110,
              103,
              32,
              97,
              32,
              112,
              108,
              97,
              110,
              32,
              98,
              97,
              115,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              119,
              101,
              97,
              116,
              104,
              101,
              114,
              32,
              105,
              110,
              102,
              111,
              114,
              109,
              97,
              116,
              105,
              111,
              110,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              100,
              46,
              32,
              84,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              32,
              112,
              97,
              114,
              97,
              109,
              101,
              116,
              101,
              114,
              115,
              32,
              97,
              114,
              101,
              58,
              92,
              110,
              112,
              108,
              97,
              110,
              95,
              110,
              97,
              109,
              101,
              58,
              32,
              78,
              111,
              116,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              100,
              32,
              98,
              121,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              92,
              110,
              112,
              108,
              97,
              110,
              95,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              58,
              32,
              78,
              111,
              116,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              100,
              32,
              98,
              121,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              44,
              32,
              98,
              117,
              116,
              32,
              73,
              32,
              99,
              97,
              110,
              32,
              105,
              110,
              102,
              101,
              114,
              32,
              116,
              104,
              105,
              115,
              32,
              98,
              97,
              115,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              119,
              101,
              97,
              116,
              104,
              101,
              114,
              32,
              105,
              110,
              102,
              111,
              114,
              109,
              97,
              116,
              105,
              111,
              110,
              32,
              92,
              110,
              116,
              97,
              103,
              115,
              58,
              32,
              79,
              112,
              116,
              105,
              111,
              110,
              97,
              108,
              44,
              32,
              115,
              111,
              32,
              110,
              111,
              116,
              32,
              110,
              101,
              101,
              100,
              101,
              100,
              92,
              110,
              92,
              110,
              83,
              105,
              110,
              99,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              100,
              105,
              100,
              32,
              110,
              111,
              116,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              32,
              97,
              32,
              112,
              108,
              97,
              110,
              95,
              110,
              97,
              109,
              101,
              32,
              111,
              114,
              32,
              97,
              115,
              107,
              32,
              109,
              101,
              32,
              116,
              111,
              32,
              115,
              97,
              118,
              101,
              32,
              97,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              32,
              112,
              114,
              101,
              45,
              119,
              114,
              105,
              116,
              116,
              101,
              110,
              32,
              112,
              108,
              97,
              110,
              44,
              32,
              73,
              32,
              119,
              105,
              108,
              108,
              32,
              110,
              101,
              101,
              100,
              32,
              116,
              111,
              32,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              101,
              32,
              116,
              104,
              101,
              32,
              112,
              108,
              97,
              110,
              95,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              32,
              109,
              121,
              115,
              101,
              108,
              102,
              32,
              98,
              97,
              115,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              119,
              101,
              97,
              116,
              104,
              101,
              114,
              32,
              105,
              110,
              102,
              111,
              114,
              109,
              97,
              116,
              105,
              111,
              110,
              44,
              32,
              97,
              110,
              100,
              32,
              97,
              115,
              107,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              116,
              111,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              32,
              97,
              32,
              110,
              97,
              109,
              101,
              32,
              116,
              111,
              32,
              115,
              97,
              118,
              101,
              32,
              116,
              104,
              101,
              32,
              112,
              108,
              97,
              110,
              32,
              117,
              110,
              100,
              101,
              114,
              46,
              92,
              110,
              60,
              47,
              116,
              104,
              105,
              110,
              107,
              105,
              110,
              103,
              62,
              92,
              110,
              92,
              110,
              66,
              97,
              115,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              114,
              114,
              101,
              110,
              116,
              32,
              119,
              101,
              97,
              116,
              104,
              101,
              114,
              32,
              105,
              110,
              32,
              83,
              97,
              110,
              32,
              70,
              114,
              97,
              110,
              99,
              105,
              115,
              99,
              111,
              58,
              92,
              110,
              84,
              101,
              109,
              112,
              58,
              32,
              49,
              54,
              194,
              176,
              67,
              92,
              110,
              67,
              111,
              110,
              100,
              105,
              116,
              105,
              111,
              110,
              58,
              32,
              80,
              97,
              114,
              116,
              108,
              121,
              32,
              67,
              108,
              111,
              117,
              100,
              121,
              32,
              92,
              110,
              87,
              105,
              110,
              100,
              58,
              32,
              49,
              52,
              32,
              107,
              109,
              47,
              104,
              92,
              110,
              92,
              110,
              72,
              101,
              114,
              101,
              32,
              105,
              115,
              32,
              97,
              32,
              115,
              117,
              103,
              103,
              101,
              115,
              116,
              101,
              100,
              32,
              112,
              108,
              97,
              110,
              32,
              102,
              111,
              114,
              32,
              119,
              104,
              97,
              116,
              32,
              116,
              111,
              32,
              119,
              101,
              97,
              114,
              58,
              92,
              110,
              92,
              110,
              80,
              108,
              97,
              110,
              58,
              32,
              83,
              97,
              110,
              32,
              70,
              114,
              97,
              110,
              99,
              105,
              115,
              99,
              111,
              32,
              80,
              97,
              114,
              116,
              108,
              121,
              32,
              67,
              108,
              111,
              117,
              100,
              121,
              32,
              68,
              97,
              121,
              92,
              110,
              92,
              110,
              87,
              105,
              116,
              104,
              32,
              97,
              32,
              116,
              101,
              109,
              112,
              101,
              114,
              97,
              116,
              117,
              114,
              101,
              32,
              111,
              102,
              32,
              49,
              54,
              194,
              176,
              67,
              32,
              40,
              54,
              48,
              194,
              176,
              70,
              41,
              32,
              97,
              110,
              100,
              32,
              112,
              97,
              114,
              116,
              108,
              121,
              32,
              99,
              108,
              111,
              117,
              100,
              121,
              32,
              115,
              107,
              105,
              101,
              115,
              44,
              32,
              105,
              116,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              98,
              101,
              32,
              97,
              32,
              109,
              105,
              108,
              100,
              32,
              100,
              97,
              121,
              32,
              105,
              110,
              32,
              83,
              97,
              110,
              32,
              70,
              114,
              97,
              110,
              99,
              105,
              115,
              99,
              111,
              46,
              32,
              72,
              111,
              119,
              101,
              118,
              101,
              114,
              44,
              32,
              119,
              105,
              116,
              104,
              32,
              119,
              105,
              110,
              100,
              32,
              115,
              112,
              101,
              101,
              100,
              115,
              32,
              97,
              114,
              111,
              117,
              110,
              100,
              32,
              49,
              52,
              32,
              107,
              109,
              47,
              104,
              32,
              40,
              57,
              32,
              109,
              112,
              104,
              41,
              44,
              32,
              105,
              116,
              32,
              109,
              97,
              121,
              32,
              102,
              101,
              101,
              108,
              32,
              97,
              32,
              98,
              105,
              116,
              32,
              99,
              111,
              111,
              108,
              101,
              114,
              46,
              32,
              92,
              110,
              92,
              110,
              82,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              97,
              116,
              105,
              111,
              110,
              115,
              58,
              92,
              110,
              45,
              32,
              87,
              101,
              97,
              114,
              32,
              108,
              111,
              110,
              103,
              32,
              112,
              97,
              110,
              116,
              115,
              32,
              111,
              114,
              32,
              106,
              101,
              97,
              110,
              115,
              32,
              92,
              110,
              45,
              32,
              65,
              32,
              108,
              105,
              103,
              104,
              116,
              32,
              108,
              111,
              110,
              103,
              45,
              115,
              108,
              101,
              101,
              118,
              101,
              32,
              115,
              104,
              105,
              114,
              116,
              32,
              111,
              114,
              32,
              115,
              119,
              101,
              97,
              116,
              101,
              114,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              115,
              117,
              102,
              102,
              105,
              99,
              101,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              117,
              112,
              112,
              101,
              114,
              32,
              98,
              111,
              100,
              121,
              92,
              110,
              45,
              32,
              66,
              114,
              105,
              110,
              103,
              32,
              97,
              32,
              108,
              105,
              103,
              104,
              116,
              32,
              106,
              97,
              99,
              107,
              101,
              116,
              32,
              111,
              114,
              32,
              119,
              105,
              110,
              100,
              98,
              114,
              101,
              97,
              107,
              101,
              114,
              32,
              105,
              110,
              32,
              99,
              97,
              115,
              101,
              32,
              105,
              116,
              32,
              103,
              101,
              116,
              115,
              32,
              98,
              114,
              101,
              101,
              122,
              105,
              101,
              114,
              92,
              110,
              45,
              32,
              67,
              111,
              109,
              102,
              111,
              114,
              116,
              97,
              98,
              108,
              101,
              32,
              99,
              108,
              111,
              115,
              101,
              100,
              45,
              116,
              111,
              101,
              32,
              115,
              104,
              111,
              101,
              115,
              32,
              97,
              114,
              101,
              32,
              102,
              105,
              110,
              101,
              44,
              32,
              110,
              111,
              32,
              110,
              101,
              101,
              100,
              32,
              102,
              111,
              114,
              32,
              98,
              111,
              111,
              116,
              115,
              92,
              110,
              45,
              32,
              83,
              117,
              110,
              103,
              108,
              97,
              115,
              115,
              101,
              115,
              32,
              97,
              114,
              101,
              32,
              111,
              112,
              116,
              105,
              111,
              110,
              97,
              108,
              32,
              115,
              105,
              110,
              99,
              101,
              32,
              105,
              116,
              39,
              115,
              32,
              112,
              97,
              114,
              116,
              108,
              121,
              32,
              99,
              108,
              111,
              117,
              100,
              121,
              92,
              110,
              92,
              110,
              79,
              118,
              101,
              114,
              97,
              108,
              108,
              44,
              32,
              100,
              114,
              101,
              115,
              115,
              32,
              105,
              110,
              32,
              108,
              97,
              121,
              101,
              114,
              115,
              32,
              116,
              104,
              97,
              116,
              32,
              121,
              111,
              117,
              32,
              99,
              97,
              110,
              32,
              101,
              97,
              115,
              105,
              108,
              121,
              32,
              112,
              117,
              116,
              32,
              111,
              110,
              32,
              111,
              114,
              32,
              116,
              97,
              107,
              101,
              32,
              111,
              102,
              102,
              32,
              97,
              115,
              32,
              110,
              101,
              101,
              100,
              101,
              100,
              44,
              32,
              97,
              110,
              100,
              32,
              98,
              101,
              32,
              112,
              114,
              101,
              112,
              97,
              114,
              101,
              100,
              32,
              102,
              111,
              114,
              32,
              116,
              101,
              109,
              112,
              101,
              114,
              97,
              116,
              117,
              114,
              101,
              115,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              49,
              53,
              45,
              50,
              48,
              194,
              176,
              67,
              32,
              40,
              53,
              57,
              45,
              54,
              56,
              194,
              176,
              70,
              41,
              32,
              114,
              97,
              110,
              103,
              101,
              32,
              119,
              105,
              116,
              104,
              32,
              115,
              111,
              109,
              101,
              32,
              119,
              105,
              110,
              100,
              32,
              99,
              104,
              105,
              108,
              108,
              46,
              32,
              76,
              101,
              116,
              32,
              109,
              101,
              32,
              107,
              110,
              111,
              119,
              32,
              105,
              102,
              32,
              121,
              111,
              117,
              32,
              119,
              111,
              117,
              108,
              100,
              32,
              108,
              105,
              107,
              101,
              32,
              109,
              101,
              32,
              116,
              111,
              32,
              115,
              97,
              118,
              101,
              32,
              116,
              104,
              105,
              115,
              32,
              112,
              108,
              97,
              110,
              44,
              32,
              97,
              110,
              100,
              32,
              105,
              102,
              32,
              115,
              111,
              44,
              32,
              112,
              108,
              101,
              97,
              115,
              101,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              32,
              97,
              32,
              110,
              97,
              109,
              101,
              32,
              116,
              111,
              32,
              115,
              97,
              118,
              101,
              32,
              105,
              116,
              32,
              117,
              110,
              100,
              101,
              114,
              46,
              34,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              125
            ]
          },
          "cookie": [],
          "responseTime": 28127,
          "responseSize": 1610
        },
        "id": "f2bbcbbc-257d-4bc6-ab82-9278c918d298",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response indicates completed status",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "ef6676c6-2d6b-4062-b343-8faa7cc6a0ae",
          "length": 13,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "4e4eb44c-6a7d-4cb6-ac95-88d6ca49f73d"
        },
        "item": {
          "id": "80c147a8-57aa-47da-a89c-fa23e475c68c",
          "name": "Execute Custom Workflow (Example)",
          "request": {
            "description": {
              "content": "Executes the example custom workflow defined in the config.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "custom_workflows",
                "ExampleCustom",
                "execute"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{api_key}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"initial_input\": \"Run the example custom workflow for London\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f766f1c4-ddd7-40dd-9898-b36687c248c3",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response indicates completed status and has result\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql('completed');",
                  "    pm.expect(jsonData.error).to.be.null;",
                  "    pm.expect(jsonData.result).to.exist;",
                  "    // Add more specific result checks if needed",
                  "    pm.expect(jsonData.result.status).to.eql('success');",
                  "});"
                ],
                "_lastExecutionId": "2a6a64db-0130-47dc-8b42-ba208e49e1b2"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Executes the example custom workflow defined in the config.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "custom_workflows",
              "ExampleCustom",
              "execute"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "X-API-Key",
              "value": "RwkWJFhApciiUSyH3B/Ad6T46kIxbu9gtAU"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "892d2b64-e304-4947-a333-3976e05e4896",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "69",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"initial_input\": \"Run the example custom workflow for London\"\n}"
          }
        },
        "response": {
          "id": "51ec578a-97aa-4915-ba9d-05288d975457",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Wed, 09 Apr 2025 20:08:38 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "457"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              119,
              111,
              114,
              107,
              102,
              108,
              111,
              119,
              95,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              67,
              117,
              115,
              116,
              111,
              109,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              44,
              34,
              114,
              101,
              115,
              117,
              108,
              116,
              34,
              58,
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              95,
              114,
              101,
              99,
              101,
              105,
              118,
              101,
              100,
              34,
              58,
              34,
              82,
              117,
              110,
              32,
              116,
              104,
              101,
              32,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              119,
              111,
              114,
              107,
              102,
              108,
              111,
              119,
              32,
              102,
              111,
              114,
              32,
              76,
              111,
              110,
              100,
              111,
              110,
              34,
              44,
              34,
              97,
              103,
              101,
              110,
              116,
              95,
              114,
              101,
              115,
              117,
              108,
              116,
              95,
              116,
              101,
              120,
              116,
              34,
              58,
              34,
              66,
              97,
              115,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              119,
              101,
              97,
              116,
              104,
              101,
              114,
              32,
              108,
              111,
              111,
              107,
              117,
              112,
              44,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              114,
              114,
              101,
              110,
              116,
              32,
              119,
              101,
              97,
              116,
              104,
              101,
              114,
              32,
              105,
              110,
              32,
              76,
              111,
              110,
              100,
              111,
              110,
              32,
              105,
              115,
              58,
              92,
              110,
              45,
              32,
              84,
              101,
              109,
              112,
              101,
              114,
              97,
              116,
              117,
              114,
              101,
              58,
              32,
              49,
              53,
              194,
              176,
              67,
              32,
              92,
              110,
              45,
              32,
              67,
              111,
              110,
              100,
              105,
              116,
              105,
              111,
              110,
              58,
              32,
              82,
              97,
              105,
              110,
              121,
              92,
              110,
              45,
              32,
              72,
              117,
              109,
              105,
              100,
              105,
              116,
              121,
              58,
              32,
              57,
              48,
              37,
              92,
              110,
              92,
              110,
              84,
              104,
              101,
              32,
              116,
              101,
              109,
              112,
              101,
              114,
              97,
              116,
              117,
              114,
              101,
              32,
              105,
              115,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              100,
              32,
              105,
              110,
              32,
              67,
              101,
              108,
              115,
              105,
              117,
              115,
              32,
              115,
              105,
              110,
              99,
              101,
              32,
              116,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              92,
              34,
              109,
              101,
              116,
              114,
              105,
              99,
              92,
              34,
              32,
              117,
              110,
              105,
              116,
              115,
              32,
              119,
              101,
              114,
              101,
              32,
              117,
              115,
              101,
              100,
              46,
              92,
              110,
              92,
              110,
              76,
              101,
              116,
              32,
              109,
              101,
              32,
              107,
              110,
              111,
              119,
              32,
              105,
              102,
              32,
              121,
              111,
              117,
              32,
              110,
              101,
              101,
              100,
              32,
              97,
              110,
              121,
              32,
              111,
              116,
              104,
              101,
              114,
              32,
              119,
              101,
              97,
              116,
              104,
              101,
              114,
              32,
              100,
              101,
              116,
              97,
              105,
              108,
              115,
              32,
              102,
              111,
              114,
              32,
              76,
              111,
              110,
              100,
              111,
              110,
              33,
              34,
              125,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              125
            ]
          },
          "cookie": [],
          "responseTime": 11175,
          "responseSize": 457
        },
        "id": "80c147a8-57aa-47da-a89c-fa23e475c68c",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response indicates completed status and has result",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "e3b40263-d15d-455e-95ad-42b6e92d7885",
          "length": 13,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "eef0eb55-a903-478e-9c98-a31734980176"
        },
        "item": {
          "id": "364a23b1-fd93-4972-8fff-e6f8b2ff1c87",
          "name": "[Dynamic] Register Client (Success)",
          "request": {
            "description": {
              "content": "Registers a new client dynamically.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "clients",
                "register"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{api_key}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"client_id\": \"dynamic_test_client\",\n    \"server_path\": \"tests/fixtures/servers/weather_mcp_server.py\",\n    \"roots\": [],\n    \"capabilities\": [\"tools\"],\n    \"timeout\": 10.0,\n    \"routing_weight\": 0.5,\n    \"exclude\": null\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "45374802-8c11-4090-82a4-826ac1bd53e1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 201 Created\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response body is correct\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.eql({status: 'success', client_id: 'dynamic_test_client'});",
                  "});"
                ],
                "_lastExecutionId": "74e9bc1d-562d-4a82-95b1-dec7956f5be1"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Registers a new client dynamically.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "clients",
              "register"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "X-API-Key",
              "value": "RwkWJFhApciiUSyH3B/Ad6T46kIxbu9gtAU"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "4e34d625-c713-4187-87b3-c9084ac5e790",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "226",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"client_id\": \"dynamic_test_client\",\n    \"server_path\": \"tests/fixtures/servers/weather_mcp_server.py\",\n    \"roots\": [],\n    \"capabilities\": [\"tools\"],\n    \"timeout\": 10.0,\n    \"routing_weight\": 0.5,\n    \"exclude\": null\n}"
          }
        },
        "response": {
          "id": "43bb90b7-7d48-4778-ba38-065007bdb4a8",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "date",
              "value": "Wed, 09 Apr 2025 20:08:38 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "54"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              105,
              100,
              34,
              58,
              34,
              100,
              121,
              110,
              97,
              109,
              105,
              99,
              95,
              116,
              101,
              115,
              116,
              95,
              99,
              108,
              105,
              101,
              110,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 386,
          "responseSize": 54
        },
        "id": "364a23b1-fd93-4972-8fff-e6f8b2ff1c87",
        "assertions": [
          {
            "assertion": "Status code is 201 Created",
            "skipped": false
          },
          {
            "assertion": "Response body is correct",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "b2114d29-8de3-4ef3-b30a-7493759ca5b1",
          "length": 13,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "d862d5d1-df52-4a1d-a4a5-1f1891de4634"
        },
        "item": {
          "id": "ac16489e-2797-46a1-a088-8dc85303a874",
          "name": "[Dynamic] Register Client (Duplicate)",
          "request": {
            "description": {
              "content": "Attempts to register a client with an ID that already exists.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "clients",
                "register"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{api_key}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"client_id\": \"dynamic_test_client\",\n    \"server_path\": \"tests/fixtures/servers/weather_mcp_server.py\",\n    \"roots\": [],\n    \"capabilities\": [\"tools\"],\n    \"timeout\": 10.0,\n    \"routing_weight\": 0.5,\n    \"exclude\": null\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "26669c23-e5db-43df-9a06-41dac812001f",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 409 Conflict\", function () {",
                  "    pm.response.to.have.status(409);",
                  "});",
                  "",
                  "pm.test(\"Response body contains error detail\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('detail');",
                  "    pm.expect(jsonData.detail).to.contain('already registered');",
                  "});"
                ],
                "_lastExecutionId": "b853d660-b5ea-474e-89f8-1396107fb410"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Attempts to register a client with an ID that already exists.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "clients",
              "register"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "X-API-Key",
              "value": "RwkWJFhApciiUSyH3B/Ad6T46kIxbu9gtAU"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a2522778-d6ff-4462-a3bc-a64e624570a3",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "226",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"client_id\": \"dynamic_test_client\",\n    \"server_path\": \"tests/fixtures/servers/weather_mcp_server.py\",\n    \"roots\": [],\n    \"capabilities\": [\"tools\"],\n    \"timeout\": 10.0,\n    \"routing_weight\": 0.5,\n    \"exclude\": null\n}"
          }
        },
        "response": {
          "id": "3e1a5f33-7ce7-400f-8b47-f1168739c2eb",
          "status": "Conflict",
          "code": 409,
          "header": [
            {
              "key": "date",
              "value": "Wed, 09 Apr 2025 20:08:38 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "64"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              67,
              108,
              105,
              101,
              110,
              116,
              32,
              73,
              68,
              32,
              39,
              100,
              121,
              110,
              97,
              109,
              105,
              99,
              95,
              116,
              101,
              115,
              116,
              95,
              99,
              108,
              105,
              101,
              110,
              116,
              39,
              32,
              97,
              108,
              114,
              101,
              97,
              100,
              121,
              32,
              114,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
              101,
              100,
              46,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 64
        },
        "id": "ac16489e-2797-46a1-a088-8dc85303a874",
        "assertions": [
          {
            "assertion": "Status code is 409 Conflict",
            "skipped": false
          },
          {
            "assertion": "Response body contains error detail",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "b92cf504-485b-4d71-b20e-32b7b98d0cb5",
          "length": 13,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "45e52e55-34fc-4e09-bca6-acee185d421f"
        },
        "item": {
          "id": "0f4da448-c944-4b4a-8cfb-a0aa5ce1710e",
          "name": "[Dynamic] Register Agent (Success)",
          "request": {
            "description": {
              "content": "Registers a new agent dynamically.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "agents",
                "register"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{api_key}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Dynamic Test Agent\",\n    \"client_ids\": [\"dynamic_test_client\", \"weather_server\"],\n    \"system_prompt\": \"This is a dynamically registered agent.\",\n    \"model\": \"claude-3-haiku-20240307\",\n    \"temperature\": 0.5,\n    \"max_tokens\": 100,\n    \"max_iterations\": 3,\n    \"include_history\": false\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "19c166ff-340b-440d-a0af-79d37fc63f77",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 201 Created\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response body is correct\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.eql({status: 'success', agent_name: 'Dynamic Test Agent'});",
                  "});"
                ],
                "_lastExecutionId": "96cf68a6-a699-4e8e-93bc-b0d967e18761"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Registers a new agent dynamically.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "agents",
              "register"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "X-API-Key",
              "value": "RwkWJFhApciiUSyH3B/Ad6T46kIxbu9gtAU"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "81c9d4c0-84cd-43e0-b161-589067f0a4d7",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "303",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"name\": \"Dynamic Test Agent\",\n    \"client_ids\": [\"dynamic_test_client\", \"weather_server\"],\n    \"system_prompt\": \"This is a dynamically registered agent.\",\n    \"model\": \"claude-3-haiku-20240307\",\n    \"temperature\": 0.5,\n    \"max_tokens\": 100,\n    \"max_iterations\": 3,\n    \"include_history\": false\n}"
          }
        },
        "response": {
          "id": "6f67c769-746f-41f8-94c4-fd62ac47c4f9",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "date",
              "value": "Wed, 09 Apr 2025 20:08:38 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "54"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              97,
              103,
              101,
              110,
              116,
              95,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              68,
              121,
              110,
              97,
              109,
              105,
              99,
              32,
              84,
              101,
              115,
              116,
              32,
              65,
              103,
              101,
              110,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 8,
          "responseSize": 54
        },
        "id": "0f4da448-c944-4b4a-8cfb-a0aa5ce1710e",
        "assertions": [
          {
            "assertion": "Status code is 201 Created",
            "skipped": false
          },
          {
            "assertion": "Response body is correct",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "7655d789-775e-4d1a-8965-648f71fd5054",
          "length": 13,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "49f1db61-9b7c-436f-a566-0fe717e44483"
        },
        "item": {
          "id": "b76f02a1-633f-4351-9ce4-5cf0bc52ca3f",
          "name": "[Dynamic] Register Agent (Duplicate Name)",
          "request": {
            "description": {
              "content": "Attempts to register an agent with a name that already exists.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "agents",
                "register"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{api_key}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Dynamic Test Agent\",\n    \"client_ids\": [\"weather_server\"],\n    \"system_prompt\": \"Attempting duplicate registration.\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "08e43143-01fd-4c26-ba6f-2b4471206ebb",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 409 Conflict\", function () {",
                  "    pm.response.to.have.status(409);",
                  "});",
                  "",
                  "pm.test(\"Response body contains error detail\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('detail');",
                  "    pm.expect(jsonData.detail).to.contain('already registered');",
                  "});"
                ],
                "_lastExecutionId": "40bb82b1-2e54-4192-8a11-915684c58c41"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Attempts to register an agent with a name that already exists.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "agents",
              "register"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "X-API-Key",
              "value": "RwkWJFhApciiUSyH3B/Ad6T46kIxbu9gtAU"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e1b65c36-549f-4c2b-9088-3b3fde9fc302",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "133",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"name\": \"Dynamic Test Agent\",\n    \"client_ids\": [\"weather_server\"],\n    \"system_prompt\": \"Attempting duplicate registration.\"\n}"
          }
        },
        "response": {
          "id": "b2b52093-5080-4ad4-9e21-6eace6bc2559",
          "status": "Conflict",
          "code": 409,
          "header": [
            {
              "key": "date",
              "value": "Wed, 09 Apr 2025 20:08:38 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "64"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              65,
              103,
              101,
              110,
              116,
              32,
              110,
              97,
              109,
              101,
              32,
              39,
              68,
              121,
              110,
              97,
              109,
              105,
              99,
              32,
              84,
              101,
              115,
              116,
              32,
              65,
              103,
              101,
              110,
              116,
              39,
              32,
              97,
              108,
              114,
              101,
              97,
              100,
              121,
              32,
              114,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
              101,
              100,
              46,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 64
        },
        "id": "b76f02a1-633f-4351-9ce4-5cf0bc52ca3f",
        "assertions": [
          {
            "assertion": "Status code is 409 Conflict",
            "skipped": false
          },
          {
            "assertion": "Response body contains error detail",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "52fe50a2-93d9-435d-b423-19421bd0b39d",
          "length": 13,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "da04177b-6147-4aad-934c-e95a7f564f20"
        },
        "item": {
          "id": "d874a84c-041f-405a-b609-d30097501e3b",
          "name": "[Dynamic] Register Agent (Invalid Client ID)",
          "request": {
            "description": {
              "content": "Attempts to register an agent referencing a client ID that does not exist.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "agents",
                "register"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{api_key}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Agent With Invalid Client\",\n    \"client_ids\": [\"non_existent_client\"],\n    \"system_prompt\": \"This registration should fail.\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "384d302c-76f6-42cd-8fdc-cc6092c180c5",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400 Bad Request\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response body contains error detail\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('detail');",
                  "    pm.expect(jsonData.detail).to.contain('not found');",
                  "});"
                ],
                "_lastExecutionId": "21d4d2a8-8384-431a-b321-bd9be8874ee9"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Attempts to register an agent referencing a client ID that does not exist.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "agents",
              "register"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "X-API-Key",
              "value": "RwkWJFhApciiUSyH3B/Ad6T46kIxbu9gtAU"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5661b309-b5cb-401b-8102-df47e81306c5",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "141",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"name\": \"Agent With Invalid Client\",\n    \"client_ids\": [\"non_existent_client\"],\n    \"system_prompt\": \"This registration should fail.\"\n}"
          }
        },
        "response": {
          "id": "fc1e454f-f44c-4a9f-ba2d-a680b81e5b62",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "date",
              "value": "Wed, 09 Apr 2025 20:08:38 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "93"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              67,
              108,
              105,
              101,
              110,
              116,
              32,
              73,
              68,
              32,
              39,
              110,
              111,
              110,
              95,
              101,
              120,
              105,
              115,
              116,
              101,
              110,
              116,
              95,
              99,
              108,
              105,
              101,
              110,
              116,
              39,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              32,
              102,
              111,
              114,
              32,
              97,
              103,
              101,
              110,
              116,
              32,
              39,
              65,
              103,
              101,
              110,
              116,
              32,
              87,
              105,
              116,
              104,
              32,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              39,
              46,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 93
        },
        "id": "d874a84c-041f-405a-b609-d30097501e3b",
        "assertions": [
          {
            "assertion": "Status code is 400 Bad Request",
            "skipped": false
          },
          {
            "assertion": "Response body contains error detail",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "d81b1d00-8861-4df9-8058-0c969fe2a885",
          "length": 13,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "8133e3fa-b477-4735-b7de-ebeebb3d8e0b"
        },
        "item": {
          "id": "285374a2-e1b9-4457-a295-23a5dbd817b6",
          "name": "[Dynamic] Register Workflow (Success)",
          "request": {
            "description": {
              "content": "Registers a new workflow dynamically.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "workflows",
                "register"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{api_key}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Dynamic Test Workflow\",\n    \"steps\": [\"Dynamic Test Agent\", \"Weather Agent\"],\n    \"description\": \"A workflow registered dynamically.\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b633ea8c-8e8c-44b9-bf88-dc8bfe81cefc",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 201 Created\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response body is correct\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.eql({status: 'success', workflow_name: 'Dynamic Test Workflow'});",
                  "});"
                ],
                "_lastExecutionId": "753bb2a5-1a7c-43ef-bded-7000529f22d2"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Registers a new workflow dynamically.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "workflows",
              "register"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "X-API-Key",
              "value": "RwkWJFhApciiUSyH3B/Ad6T46kIxbu9gtAU"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c29df612-fd44-4153-ad0f-387ac6bc3ded",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "150",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"name\": \"Dynamic Test Workflow\",\n    \"steps\": [\"Dynamic Test Agent\", \"Weather Agent\"],\n    \"description\": \"A workflow registered dynamically.\"\n}"
          }
        },
        "response": {
          "id": "80a708c9-a6f0-4f72-b822-c1295e414e69",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "date",
              "value": "Wed, 09 Apr 2025 20:08:38 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "60"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              119,
              111,
              114,
              107,
              102,
              108,
              111,
              119,
              95,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              68,
              121,
              110,
              97,
              109,
              105,
              99,
              32,
              84,
              101,
              115,
              116,
              32,
              87,
              111,
              114,
              107,
              102,
              108,
              111,
              119,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 60
        },
        "id": "285374a2-e1b9-4457-a295-23a5dbd817b6",
        "assertions": [
          {
            "assertion": "Status code is 201 Created",
            "skipped": false
          },
          {
            "assertion": "Response body is correct",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "4ba9dd03-96b0-41a7-bd82-9bef0d54fac8",
          "length": 13,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "0cd9961f-52a1-43a4-b49d-74dd36d4a174"
        },
        "item": {
          "id": "cd43a27a-1551-4dfa-8991-b12cc4a42cee",
          "name": "[Dynamic] Register Workflow (Duplicate Name)",
          "request": {
            "description": {
              "content": "Attempts to register a workflow with a name that already exists.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "workflows",
                "register"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{api_key}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Dynamic Test Workflow\",\n    \"steps\": [\"Weather Agent\"],\n    \"description\": \"Attempting duplicate registration.\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f933e2b0-9794-4996-af82-aad0c42047a2",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 409 Conflict\", function () {",
                  "    pm.response.to.have.status(409);",
                  "});",
                  "",
                  "pm.test(\"Response body contains error detail\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('detail');",
                  "    pm.expect(jsonData.detail).to.contain('already registered');",
                  "});"
                ],
                "_lastExecutionId": "2ff3d107-62c1-4df1-b411-7338c99feb17"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Attempts to register a workflow with a name that already exists.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "workflows",
              "register"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "X-API-Key",
              "value": "RwkWJFhApciiUSyH3B/Ad6T46kIxbu9gtAU"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6e162964-ba1a-43f3-8d4f-7583a073b849",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "128",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"name\": \"Dynamic Test Workflow\",\n    \"steps\": [\"Weather Agent\"],\n    \"description\": \"Attempting duplicate registration.\"\n}"
          }
        },
        "response": {
          "id": "21d36916-6082-4bf6-83dc-83e5fa310d09",
          "status": "Conflict",
          "code": 409,
          "header": [
            {
              "key": "date",
              "value": "Wed, 09 Apr 2025 20:08:38 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "70"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              87,
              111,
              114,
              107,
              102,
              108,
              111,
              119,
              32,
              110,
              97,
              109,
              101,
              32,
              39,
              68,
              121,
              110,
              97,
              109,
              105,
              99,
              32,
              84,
              101,
              115,
              116,
              32,
              87,
              111,
              114,
              107,
              102,
              108,
              111,
              119,
              39,
              32,
              97,
              108,
              114,
              101,
              97,
              100,
              121,
              32,
              114,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
              101,
              100,
              46,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 70
        },
        "id": "cd43a27a-1551-4dfa-8991-b12cc4a42cee",
        "assertions": [
          {
            "assertion": "Status code is 409 Conflict",
            "skipped": false
          },
          {
            "assertion": "Response body contains error detail",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "30b18935-1dcd-45de-bdf6-03a7ccbd9213",
          "length": 13,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "46fc95d7-9e69-479c-be97-bd9cb0a781da"
        },
        "item": {
          "id": "a851ffcc-e090-4f1e-a6dc-90fdce5168fb",
          "name": "[Dynamic] Register Workflow (Invalid Agent Name)",
          "request": {
            "description": {
              "content": "Attempts to register a workflow referencing an agent name that does not exist.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "workflows",
                "register"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{api_key}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Workflow With Invalid Agent\",\n    \"steps\": [\"Non_Existent_Agent\"],\n    \"description\": \"This registration should fail.\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "39ac06eb-66d7-41fd-8b13-99c7cb679c29",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400 Bad Request\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response body contains error detail\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('detail');",
                  "    pm.expect(jsonData.detail).to.contain('not found');",
                  "});"
                ],
                "_lastExecutionId": "9cee38df-0e7e-44f2-bd14-a8980214a59d"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Attempts to register a workflow referencing an agent name that does not exist.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "workflows",
              "register"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "X-API-Key",
              "value": "RwkWJFhApciiUSyH3B/Ad6T46kIxbu9gtAU"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "41efa3e5-ca80-4c83-b8ac-27c5218fe882",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "135",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"name\": \"Workflow With Invalid Agent\",\n    \"steps\": [\"Non_Existent_Agent\"],\n    \"description\": \"This registration should fail.\"\n}"
          }
        },
        "response": {
          "id": "79ac4677-9061-47a5-b9e6-fbc140edb6cf",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "date",
              "value": "Wed, 09 Apr 2025 20:08:38 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "93"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              65,
              103,
              101,
              110,
              116,
              32,
              39,
              78,
              111,
              110,
              95,
              69,
              120,
              105,
              115,
              116,
              101,
              110,
              116,
              95,
              65,
              103,
              101,
              110,
              116,
              39,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              32,
              102,
              111,
              114,
              32,
              119,
              111,
              114,
              107,
              102,
              108,
              111,
              119,
              32,
              39,
              87,
              111,
              114,
              107,
              102,
              108,
              111,
              119,
              32,
              87,
              105,
              116,
              104,
              32,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              65,
              103,
              101,
              110,
              116,
              39,
              46,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 93
        },
        "id": "a851ffcc-e090-4f1e-a6dc-90fdce5168fb",
        "assertions": [
          {
            "assertion": "Status code is 400 Bad Request",
            "skipped": false
          },
          {
            "assertion": "Response body contains error detail",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 4639
    },
    "failures": [],
    "error": null
  }
}