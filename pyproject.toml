[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"
[project]
name = "aurite"
version = "0.3.21"
description = "Aurite Agent Development and Runtime Framework"
readme = "README.md"
requires-python = ">=3.11"

authors = [
    { name = "Ryan W", email = "ryan@aurite.ai" },
    { name = "Blake R", email = "blake@aurite.ai" },
    { name = "Patrick W", email = "patrick@aurite.ai" },
    { name = "Jiten O", email = "jiten@aurite.ai" },
]

license-files = ["LICENSE"]

keywords = ["ai", "agent", "mcp", "framework", "llm", "anthropic"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
]
dependencies = [
    # --- Core Framework Dependencies ---
    # Foundational packages required for the framework to function at a basic level.
    "mcp>=1.8.1",
    "pydantic>=2.10.6",
    "pydantic-settings>=2.8.1",
    "pyyaml>=6.0.2",
    "python-dotenv>=1.0.1",
    "colorlog>=6.0.0",
    "termcolor>=3.0.0", # Added back as a required runtime dependency
    "jsonschema",
    "exceptiongroup", # Added based on deptry report
    "pytz",           # Added for packaged example server

    # --- Core Entrypoints (API & CLI) ---
    # The framework's primary interfaces. These are included in the base install.
    "fastapi",
    "typer[all]>=0.9.0", # Using [all] pulls in shell completion support
    "uvicorn>=0.34.0",   # Server for FastAPI
    "sse-starlette>=2.2.1",
    "httpx-sse>=0.4.0",

    # --- Core LLM & Agent Dependencies ---
    # Essential clients for interacting with LLMs.
    "openai>=1.80.0",
    "anthropic>=0.49.0",
    "google-genai>=1.11.0",
    "litellm>=1.72.6",
    "openai-agents-mcp",

    # --- Core Database ORM & Migrations ---
    # SQLAlchemy is central to the DB storage layer. Drivers are optional.
    "sqlalchemy>=2.0.39",
    "alembic>=1.13.1",

    # --- Miscellaneous Dependencies ---
    "cryptography>=41.0.5,<44", # Pinned for Colab compatibility
    "pydub>=0.25.1",
]

[project.urls]
Homepage = "https://publish.obsidian.md/aurite/HOME"
Repository = "https://github.com/Aurite-ai/aurite-agents"

[project.optional-dependencies]
# --- Development & Testing ---
dev = [
    "pytest>=8.3.5",
    "pytest-timeout>=2.3.1",
    "mypy>=1.15.0",
    "types-PyYAML",
    "types-pytz",
    "jupyter>=1.0.0",
    "pre-commit",
    "deptry", # Add deptry to your dev dependencies!
]

# --- Machine Learning & Data ---
ml = [
    "pandas>=2.2.3",
    "numpy>=1.26.2,<2.1", # Pinned for Colab/mem0ai compatibility
]

# --- Optional Tools ---
tools = [
    "mem0ai>=0.1.67",
]

# --- Optional Database Drivers ---
# Install with: pip install aurite[postgres,mysql,redis]
postgres = ["psycopg2-binary>=2.9.10"]
mysql = ["PyMySQL>=1.1.1"]
redis = ["redis>=5.0.0"]

# --- Optional Vector Store Support ---
vectors = ["sentence-transformers"]

# --- Optional Cloud Integrations ---
# Install with: pip install aurite[gcp]
gcp = ["google-cloud-secret-manager>=2.19.0"]

[tool.setuptools]
include-package-data = true # This tells setuptools to use MANIFEST.in (hyphenated)
package-dir = {"" = "src"} # Maps importable package root to the 'src' directory

[tool.setuptools.packages.find]
where = ["src"]  # Look for packages within the 'src' directory
include = ["aurite*"] # Find 'aurite' and any sub-packages
namespaces = false
# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
log_cli = true
log_cli_level = "INFO"
# Ensure unit, integration, e2e markers are defined
markers = [
    "unit: marks tests as unit tests (fast, isolated)",
    "integration: marks tests as integration tests (component interaction)",
    "e2e: marks tests as end-to-end tests (may require external resources)",
    # "asyncio: mark test as async test", # Removed - use pytest.mark.anyio instead
    "anyio: marks tests as anyio-based async tests", # Added for pytest-anyio
    "core: mark test as core functionality test",                            # Keep existing
    "user: mark test as requiring user credentials",
    "extended: mark test as extended functionality test",
    "agent: mark test as agent test",
    "infrastructure: mark test as infrastructure/setup verification",
    "evaluation: mark test as agent evaluation test",
    "rubric: mark test that uses an evaluation rubric",
    "multirun: mark test that runs multiple evaluation iterations",
    "benchmark: mark test that compares against benchmarks",                 # Keep existing
]
pythonpath = [".", "src", "aurite"]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::UserWarning",
    "ignore::RuntimeWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::pytest.PytestUnknownMarkWarning",
    "ignore::pytest.PytestConfigWarning",
]
# Add HTML and JSON report options
addopts = "--verbose --no-header --disable-warnings"
# Configure test result captures
junit_family = "xunit2"
# asyncio_mode moved up
timeout = 60 # Increase default test timeout to 60 seconds

[tool.mypy]
warn_return_any = false # Don't warn about functions returning Any implicitly
ignore_missing_imports = true # Don't fail if a library doesn't have type hints (important for dependencies)
check_untyped_defs = false # Don't require type hints for functions without them (relaxed start)
disallow_untyped_defs = false # Corresponds to check_untyped_defs
show_error_codes = true # Makes errors easier to understand/suppress if needed
disallow_untyped_calls = false # Corresponds to check_untyped_defs
files=["src/aurite/**/*.py"]
follow_imports = "silent"


[project.scripts]
start-api = "aurite.bin.api.api:start"
start-worker = "aurite.bin.worker:start" # Point to the synchronous wrapper
run-cli = "aurite.bin.cli.cli_executor:app" # Makes 'run-cli' command available; args must be added manually
aurite = "aurite.bin.cli.main:app"

[tool.deptry]
# Explicitly tell deptry that 'aurite' is the main package.
known_first_party = ["aurite"]

# Extend the default exclusion list to also ignore tests and docs,
# while still respecting .gitignore.
extend_exclude = ["tests", "docs"]

# Tell deptry that only the 'dev' group should be treated as containing development-only dependencies.
pep621_dev_dependency_groups = ["dev"]

# Map package names to the modules they provide.
[tool.deptry.package_module_name_map]
"psycopg2-binary" = "psycopg2"

[tool.deptry.per_rule_ignores]
# DEP001: Ignore missing 'mem0' since it's in an optional group.
DEP001 = ["mem0"]

# DEP002: Ignore 'unused' warnings for all optional dependencies and for indirectly used core dependencies.
DEP002 = [
    # Core dependencies used indirectly
    "sse-starlette", "httpx-sse", "openai-agents-mcp", "alembic",
    # Optional dependencies
    "pandas", "numpy", "mem0ai", "psycopg2-binary", "PyMySQL", "redis", "sentence-transformers", "google-cloud-secret-manager"
]

# DEP003: Ignore these known transitive dependencies.
DEP003 = ["IPython", "httpx", "anyio"]
