# =============================================================================
# Aurite Agents Framework - Example Docker Compose Configuration
# =============================================================================
# This is an example docker-compose.yml file showing how to use the published
# Aurite Agents container from DockerHub.
#
# Usage:
#   1. Copy this file to your project directory as docker-compose.yml
#   2. Create a .env file with your configuration (see .env.example below)
#   3. Run: docker compose up
#
# For more examples and documentation:
#   https://github.com/Aurite-ai/aurite-agents
# =============================================================================

version: '3.8'

services:
  # =============================================================================
  # Aurite Agents API Server
  # =============================================================================
  aurite:
    image: aurite/aurite-agents:latest
    container_name: aurite_agents
    ports:
      - "${PORT:-8000}:8000"
    volumes:
      # Mount your project directory here
      # The container will look for .aurite file in this directory
      - ./:/app/project
    environment:
      # Required: API key for authentication
      - API_KEY=${API_KEY}

      # Optional: Auto-initialize project if no .aurite file found
      # - AURITE_AUTO_INIT=true

      # Optional: Enable database persistence
      # - AURITE_ENABLE_DB=true
      # - AURITE_DB_TYPE=sqlite

      # Optional: LLM provider API keys (pass through from .env)
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}

      # Optional: Logging level
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python3", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/health').read()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # =============================================================================
  # PostgreSQL Database (Optional)
  # =============================================================================
  # Uncomment this section if you want to use PostgreSQL for persistence
  # Also set AURITE_ENABLE_DB=true and AURITE_DB_TYPE=postgres in aurite service
  #
  # postgres:
  #   image: postgres:15-alpine
  #   container_name: aurite_postgres
  #   environment:
  #     POSTGRES_USER: ${AURITE_DB_USER:-aurite_user}
  #     POSTGRES_PASSWORD: ${AURITE_DB_PASSWORD:-aurite_password}
  #     POSTGRES_DB: ${AURITE_DB_NAME:-aurite_db}
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   ports:
  #     - "${POSTGRES_PORT:-5432}:5432"
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U ${AURITE_DB_USER:-aurite_user}"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  # =============================================================================
  # Redis Cache (Optional)
  # =============================================================================
  # Uncomment this section if you want to use Redis for caching
  #
  # redis:
  #   image: redis:7-alpine
  #   container_name: aurite_redis
  #   ports:
  #     - "${REDIS_PORT:-6379}:6379"
  #   volumes:
  #     - redis_data:/data
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 3

# =============================================================================
# Volumes (Uncomment if using PostgreSQL or Redis)
# =============================================================================
# volumes:
#   postgres_data:
#     driver: local
#   redis_data:
#     driver: local

# =============================================================================
# Networks (Optional - for advanced configurations)
# =============================================================================
# networks:
#   aurite_network:
#     driver: bridge

---
# =============================================================================
# Example .env file
# =============================================================================
# Create a .env file in the same directory with the following content:
#
# # Required
# API_KEY=your_secure_api_key_here
#
# # Optional - Port configuration
# PORT=8000
#
# # Optional - LLM Provider API Keys
# OPENAI_API_KEY=your_openai_api_key_here
# ANTHROPIC_API_KEY=your_anthropic_api_key_here
# GEMINI_API_KEY=your_gemini_api_key_here
#
# # Optional - Database configuration (if using PostgreSQL)
# AURITE_DB_USER=aurite_user
# AURITE_DB_PASSWORD=secure_password_here
# AURITE_DB_NAME=aurite_db
# POSTGRES_PORT=5432
#
# # Optional - Redis configuration
# REDIS_PORT=6379
#
# # Optional - Logging
# LOG_LEVEL=INFO
# =============================================================================
