openapi: 3.1.0
info:
  title: Aurite Agents API
  description: |
    API for the Aurite Agents framework - a Python framework for building AI agents using the Model Context Protocol (MCP).

    ## Authentication
    All endpoints (except /health) require an API key to be passed in the `X-API-Key` header.

    ## Base URL
    The default base URL is `http://localhost:8000`
  version: 1.0.0
  contact:
    name: Aurite Agents Team
  license:
    name: MIT

servers:
  - url: http://localhost:8000
    description: Local development server

security:
  - APIKeyHeader: []

paths:
  /health:
    get:
      summary: Health Check
      description: Simple health check endpoint.
      tags:
        - System
      security: []
      responses:
        "200":
          description: Server is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"

  # MCP Host Endpoints
  /tools/status:
    get:
      summary: Get Host Status
      description: Get the status of the MCPHost.
      tags:
        - MCP Host
      responses:
        "200":
          description: Host status information
          content:
            application/json:
              schema:
                type: object
        "401":
          $ref: "#/components/responses/Unauthorized"

  /tools/:
    get:
      summary: List Tools
      description: List all available tools from the MCPHost.
      tags:
        - MCP Host
      responses:
        "200":
          description: List of available tools
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  additionalProperties: true
        "401":
          $ref: "#/components/responses/Unauthorized"

  /tools/servers:
    get:
      summary: List Registered Servers
      description: |
        List all currently registered MCP servers with runtime information.

        Returns runtime information about each registered server including:
        - Server name
        - Transport type
        - Number of tools provided
        - Registration time
      tags:
        - MCP Host
      responses:
        "200":
          description: List of registered servers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ServerRuntimeInfo"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /tools/servers/{server_name}:
    get:
      summary: Get Server Status
      description: |
        Get detailed runtime status for a specific MCP server.

        Returns detailed information including:
        - Registration status
        - Transport type
        - List of tool names provided by this server
        - Session status
      tags:
        - MCP Host
      parameters:
        - name: server_name
          in: path
          required: true
          schema:
            type: string
          description: Name of the MCP server
      responses:
        "200":
          description: Server status information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerDetailedStatus"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/ValidationError"

    delete:
      summary: Unregister Server
      description: Unregister an MCP server from the host.
      tags:
        - MCP Host
      parameters:
        - name: server_name
          in: path
          required: true
          schema:
            type: string
          description: Name of the MCP server
      responses:
        "200":
          description: Server unregistered successfully
          content:
            application/json:
              schema:
                type: object
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/ValidationError"

  /tools/register/config:
    post:
      summary: Register Server By Config
      description: Register a new MCP server with the host using a provided configuration.
      tags:
        - MCP Host
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClientConfig"
      responses:
        "200":
          description: Server registered successfully
          content:
            application/json:
              schema:
                type: object
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/ValidationError"

  /tools/register/{server_name}:
    post:
      summary: Register Server By Name
      description: Register a new MCP server with the host by its configured name.
      tags:
        - MCP Host
      parameters:
        - name: server_name
          in: path
          required: true
          schema:
            type: string
          description: Name of the MCP server
      responses:
        "200":
          description: Server registered successfully
          content:
            application/json:
              schema:
                type: object
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/ValidationError"

  /tools/servers/{server_name}/restart:
    post:
      summary: Restart Server
      description: |
        Restart a registered MCP server.
        This is a convenience endpoint that unregisters and then re-registers the server.
      tags:
        - MCP Host
      parameters:
        - name: server_name
          in: path
          required: true
          schema:
            type: string
          description: Name of the MCP server
      responses:
        "200":
          description: Server restarted successfully
          content:
            application/json:
              schema:
                type: object
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/ValidationError"

  /tools/{tool_name}:
    get:
      summary: Get Tool Details
      description: |
        Get detailed information about a specific tool.

        Returns:
        - Tool name and description
        - Which server provides the tool
        - Input schema for the tool
      tags:
        - MCP Host
      parameters:
        - name: tool_name
          in: path
          required: true
          schema:
            type: string
          description: Name of the tool
      responses:
        "200":
          description: Tool details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ToolDetails"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/ValidationError"

  /tools/servers/{server_name}/tools:
    get:
      summary: Get Server Tools
      description: |
        List all tools provided by a specific registered server.

        Returns a list of tools with their full details.
      tags:
        - MCP Host
      parameters:
        - name: server_name
          in: path
          required: true
          schema:
            type: string
          description: Name of the MCP server
      responses:
        "200":
          description: List of tools provided by the server
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  additionalProperties: true
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/ValidationError"

  /tools/servers/{server_name}/test:
    post:
      summary: Test Server
      description: |
        Test an MCP server configuration by temporarily registering it.

        This endpoint:
        1. Retrieves the server configuration
        2. Temporarily registers the server
        3. Discovers available tools
        4. Optionally tests a tool execution
        5. Unregisters the server
        6. Returns test results
      tags:
        - MCP Host
      parameters:
        - name: server_name
          in: path
          required: true
          schema:
            type: string
          description: Name of the MCP server
      responses:
        "200":
          description: Server test results
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerTestResult"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/ValidationError"

  /tools/{tool_name}/call:
    post:
      summary: Call Tool
      description: Execute a specific tool by name with the given arguments.
      tags:
        - MCP Host
      parameters:
        - name: tool_name
          in: path
          required: true
          schema:
            type: string
          description: Name of the tool
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ToolCallArgs"
      responses:
        "200":
          description: Tool execution result
          content:
            application/json:
              schema:
                type: object
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/ValidationError"

  # Configuration Manager Endpoints
  /config/components:
    get:
      summary: List Component Types
      description: List all available component types.
      tags:
        - Configuration Manager
      responses:
        "200":
          description: List of component types
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example:
                  [
                    "agent",
                    "llm",
                    "mcp_server",
                    "linear_workflow",
                    "custom_workflow",
                  ]
        "401":
          $ref: "#/components/responses/Unauthorized"

  /config/components/{component_type}:
    get:
      summary: List Components By Type
      description: |
        List all available components of a specific type.
        Accepts both singular and plural forms (e.g., 'agent' or 'agents').
      tags:
        - Configuration Manager
      parameters:
        - name: component_type
          in: path
          required: true
          schema:
            type: string
            enum:
              [
                agent,
                agents,
                llm,
                llms,
                mcp_server,
                mcp_servers,
                linear_workflow,
                linear_workflows,
                custom_workflow,
                custom_workflows,
              ]
          description: Type of component
      responses:
        "200":
          description: List of components
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  additionalProperties: true
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/ValidationError"

    post:
      summary: Create Component
      description: Create a new component of the specified type.
      tags:
        - Configuration Manager
      parameters:
        - name: component_type
          in: path
          required: true
          schema:
            type: string
            enum:
              [
                agent,
                agents,
                llm,
                llms,
                mcp_server,
                mcp_servers,
                linear_workflow,
                linear_workflows,
                custom_workflow,
                custom_workflows,
              ]
          description: Type of component
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ComponentCreate"
      responses:
        "200":
          description: Component created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "409":
          description: Component already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          $ref: "#/components/responses/ValidationError"

  /config/components/{component_type}/{component_id}:
    get:
      summary: Get Component By Id
      description: |
        Get a specific component by its type and ID.
        Accepts both singular and plural forms for component type (e.g., 'agent' or 'agents').
      tags:
        - Configuration Manager
      parameters:
        - name: component_type
          in: path
          required: true
          schema:
            type: string
          description: Type of component
        - name: component_id
          in: path
          required: true
          schema:
            type: string
          description: Component ID or name
      responses:
        "200":
          description: Component configuration
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/ValidationError"

    put:
      summary: Update Component
      description: Update an existing component.
      tags:
        - Configuration Manager
      parameters:
        - name: component_type
          in: path
          required: true
          schema:
            type: string
          description: Type of component
        - name: component_id
          in: path
          required: true
          schema:
            type: string
          description: Component ID or name
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ComponentUpdate"
      responses:
        "200":
          description: Component updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/ValidationError"

    delete:
      summary: Delete Component
      description: Delete a component.
      tags:
        - Configuration Manager
      parameters:
        - name: component_type
          in: path
          required: true
          schema:
            type: string
          description: Type of component
        - name: component_id
          in: path
          required: true
          schema:
            type: string
          description: Component ID or name
      responses:
        "200":
          description: Component deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/ValidationError"

  /config/components/{component_type}/{component_id}/validate:
    post:
      summary: Validate Component
      description: Validate a component's configuration.
      tags:
        - Configuration Manager
      parameters:
        - name: component_type
          in: path
          required: true
          schema:
            type: string
          description: Type of component
        - name: component_id
          in: path
          required: true
          schema:
            type: string
          description: Component ID or name
      responses:
        "200":
          description: Component is valid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/ValidationError"

  /config/sources:
    get:
      summary: List Config Sources
      description: |
        List all configuration source directories with context information.

        Returns a list of configuration source directories in priority order,
        including their context (project/workspace/user) and associated names.
      tags:
        - Configuration Manager
      responses:
        "200":
          description: List of configuration sources
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  additionalProperties: true
        "401":
          $ref: "#/components/responses/Unauthorized"

  /config/files/{source_name}:
    get:
      summary: List Config Files By Source
      description: |
        List all configuration files for a specific source.

        Returns a list of relative file paths for the given source.
      tags:
        - Configuration Manager
      parameters:
        - name: source_name
          in: path
          required: true
          schema:
            type: string
          description: Name of the configuration source
      responses:
        "200":
          description: List of configuration files
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/ValidationError"

  /config/files/{source_name}/{file_path}:
    get:
      summary: Get File Content
      description: Get the content of a specific configuration file.
      tags:
        - Configuration Manager
      parameters:
        - name: source_name
          in: path
          required: true
          schema:
            type: string
          description: Name of the configuration source
        - name: file_path
          in: path
          required: true
          schema:
            type: string
          description: Path to the configuration file
      responses:
        "200":
          description: File content
          content:
            application/json:
              schema:
                type: string
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/ValidationError"

    put:
      summary: Update Config File
      description: Update an existing configuration file.
      tags:
        - Configuration Manager
      parameters:
        - name: source_name
          in: path
          required: true
          schema:
            type: string
          description: Name of the configuration source
        - name: file_path
          in: path
          required: true
          schema:
            type: string
          description: Path to the configuration file
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FileUpdateRequest"
      responses:
        "200":
          description: File updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/ValidationError"

    delete:
      summary: Delete Config File
      description: Delete an existing configuration file.
      tags:
        - Configuration Manager
      parameters:
        - name: source_name
          in: path
          required: true
          schema:
            type: string
          description: Name of the configuration source
        - name: file_path
          in: path
          required: true
          schema:
            type: string
          description: Path to the configuration file
      responses:
        "200":
          description: File deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/ValidationError"

  /config/files:
    post:
      summary: Create Config File
      description: Create a new configuration file.
      tags:
        - Configuration Manager
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FileCreateRequest"
      responses:
        "200":
          description: File created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "409":
          description: File already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          $ref: "#/components/responses/ValidationError"

  /config/validate:
    post:
      summary: Validate All Components
      description: Validate all components in the system.
      tags:
        - Configuration Manager
      responses:
        "200":
          description: Validation results
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  additionalProperties: true
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          description: Validation failed
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  additionalProperties: true

  /config/refresh:
    post:
      summary: Refresh Configs
      description: |
        Force refresh all configurations from disk.
        This will reload all configuration files and rebuild the component index.
      tags:
        - Configuration Manager
      responses:
        "200":
          description: Configurations refreshed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          description: Failed to refresh configurations
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /config/projects:
    get:
      summary: List Projects
      description: List all projects in the current workspace.
      tags:
        - Configuration Manager
      responses:
        "200":
          description: List of projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProjectInfo"
        "401":
          $ref: "#/components/responses/Unauthorized"

    post:
      summary: Create Project
      description: Create a new project in the current workspace.
      tags:
        - Configuration Manager
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectCreate"
      responses:
        "200":
          description: Project created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "409":
          description: Project already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          $ref: "#/components/responses/ValidationError"

  /config/projects/active:
    get:
      summary: Get Active Project
      description: Get information about the currently active project.
      tags:
        - Configuration Manager
      responses:
        "200":
          description: Active project information
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/ProjectInfo"
                  - type: "null"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /config/projects/{name}:
    get:
      summary: Get Project
      description: Get information about a specific project.
      tags:
        - Configuration Manager
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
          description: Project name
      responses:
        "200":
          description: Project information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectInfo"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/ValidationError"

    put:
      summary: Update Project
      description: Update a project's configuration.
      tags:
        - Configuration Manager
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
          description: Project name
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectUpdate"
      responses:
        "200":
          description: Project updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/ValidationError"

    delete:
      summary: Delete Project
      description: Delete a project from the workspace.
      tags:
        - Configuration Manager
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
          description: Project name
      responses:
        "200":
          description: Project deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/ValidationError"

  /config/workspaces:
    get:
      summary: List Workspaces
      description: List workspace information (currently supports single workspace).
      tags:
        - Configuration Manager
      responses:
        "200":
          description: List of workspaces
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WorkspaceInfo"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /config/workspaces/active:
    get:
      summary: Get Active Workspace
      description: Get information about the currently active workspace.
      tags:
        - Configuration Manager
      responses:
        "200":
          description: Active workspace information
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/WorkspaceInfo"
                  - type: "null"
        "401":
          $ref: "#/components/responses/Unauthorized"

  # Execution Facade Endpoints
  /execution/status:
    get:
      summary: Get Facade Status
      description: Get the status of the ExecutionFacade.
      tags:
        - Execution Facade
      responses:
        "200":
          description: Execution facade status
          content:
            application/json:
              schema:
                type: object
        "401":
          $ref: "#/components/responses/Unauthorized"

  /execution/agents/{agent_name}/run:
    post:
      summary: Run Agent
      description: Execute an agent by name.
      tags:
        - Execution Facade
      parameters:
        - name: agent_name
          in: path
          required: true
          schema:
            type: string
          description: Name of the agent to execute
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AgentRunRequest"
      responses:
        "200":
          description: Agent execution result
          content:
            application/json:
              schema:
                type: object
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/ValidationError"

  /execution/agents/{agent_name}/test:
    post:
      summary: Test Agent
      description: Test an agent's configuration and dependencies.
      tags:
        - Execution Facade
      parameters:
        - name: agent_name
          in: path
          required: true
          schema:
            type: string
          description: Name of the agent to test
      responses:
        "200":
          description: Agent test results
          content:
            application/json:
              schema:
                type: object
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/ValidationError"

  /execution/agents/{agent_name}/stream:
    post:
      summary: Stream Agent
      description: Execute an agent by name and stream the response.
      tags:
        - Execution Facade
      parameters:
        - name: agent_name
          in: path
          required: true
          schema:
            type: string
          description: Name of the agent to execute
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AgentRunRequest"
      responses:
        "200":
          description: Streaming agent execution result
          content:
            text/event-stream:
              schema:
                type: string
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/ValidationError"

  /execution/workflows/linear/{workflow_name}/run:
    post:
      summary: Run Linear Workflow
      description: Execute a linear workflow by name.
      tags:
        - Execution Facade
      parameters:
        - name: workflow_name
          in: path
          required: true
          schema:
            type: string
          description: Name of the workflow to execute
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkflowRunRequest"
      responses:
        "200":
          description: Workflow execution result
          content:
            application/json:
              schema:
                type: object
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/ValidationError"

  /execution/workflows/linear/{workflow_name}/test:
    post:
      summary: Test Linear Workflow
      description: Test a linear workflow.
      tags:
        - Execution Facade
      parameters:
        - name: workflow_name
          in: path
          required: true
          schema:
            type: string
          description: Name of the workflow to test
      responses:
        "200":
          description: Workflow test results
          content:
            application/json:
              schema:
                type: object
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/ValidationError"

  /execution/workflows/custom/{workflow_name}/run:
    post:
      summary: Run Custom Workflow
      description: Execute a custom workflow by name.
      tags:
        - Execution Facade
      parameters:
        - name: workflow_name
          in: path
          required: true
          schema:
            type: string
          description: Name of the custom workflow to execute
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkflowRunRequest"
      responses:
        "200":
          description: Custom workflow execution result
          content:
            application/json:
              schema:
                type: object
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/ValidationError"

  /execution/workflows/custom/{workflow_name}/test:
    post:
      summary: Test Custom Workflow
      description: Test a custom workflow.
      tags:
        - Execution Facade
      parameters:
        - name: workflow_name
          in: path
          required: true
          schema:
            type: string
          description: Name of the custom workflow to test
      responses:
        "200":
          description: Custom workflow test results
          content:
            application/json:
              schema:
                type: object
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/ValidationError"

  /execution/workflows/custom/{workflow_name}/validate:
    post:
      summary: Validate Custom Workflow
      description: Validate a custom workflow.
      tags:
        - Execution Facade
      parameters:
        - name: workflow_name
          in: path
          required: true
          schema:
            type: string
          description: Name of the custom workflow to validate
      responses:
        "200":
          description: Custom workflow validation results
          content:
            application/json:
              schema:
                type: object
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/ValidationError"

  /execution/history:
    get:
      summary: List Execution History
      description: |
        List execution history sessions with optional filtering by agent.
        Supports pagination with offset/limit.
      tags:
        - Execution Facade
      parameters:
        - name: agent_name
          in: query
          required: false
          schema:
            type: string
          description: Filter by agent name
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
          description: Maximum number of sessions to return
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
          description: Number of sessions to skip
      responses:
        "200":
          description: List of execution history sessions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionListResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/ValidationError"

  /execution/history/{session_id}:
    get:
      summary: Get Session History
      description: |
        Get the full conversation history for a specific session.
        By default returns a simplified view, but can return raw format with raw_format=true.
      tags:
        - Execution Facade
      parameters:
        - name: session_id
          in: path
          required: true
          schema:
            type: string
          description: Session ID
        - name: raw_format
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: Return raw Anthropic format instead of simplified view
      responses:
        "200":
          description: Session conversation history
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionHistoryResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/ValidationError"

    delete:
      summary: Delete Session History
      description: |
        Delete a specific session's history.
        Returns 204 No Content on success, 404 if session not found.
      tags:
        - Execution Facade
      parameters:
        - name: session_id
          in: path
          required: true
          schema:
            type: string
          description: Session ID
      responses:
        "204":
          description: Session deleted successfully
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/ValidationError"

  /execution/agents/{agent_name}/history:
    get:
      summary: Get Agent History
      description: |
        Get all sessions for a specific agent.
        Returns the most recent sessions up to the limit.
      tags:
        - Execution Facade
      parameters:
        - name: agent_name
          in: path
          required: true
          schema:
            type: string
          description: Name of the agent
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
          description: Maximum number of sessions to return
      responses:
        "200":
          description: List of agent execution sessions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionListResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/ValidationError"

  /execution/workflows/{workflow_name}/history:
    get:
      summary: Get Workflow History
      description: |
        Get all sessions for a specific workflow.
        Returns the most recent sessions up to the limit.
      tags:
        - Execution Facade
      parameters:
        - name: workflow_name
          in: path
          required: true
          schema:
            type: string
          description: Name of the workflow
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
          description: Maximum number of sessions to return
      responses:
        "200":
          description: List of workflow execution sessions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionListResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/ValidationError"

  /execution/history/cleanup:
    post:
      summary: Cleanup History
      description: |
        Clean up old sessions based on retention policy.
        Deletes sessions older than specified days and keeps only the most recent max_sessions.
      tags:
        - Execution Facade
      parameters:
        - name: days
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 365
            default: 30
          description: Delete sessions older than this many days
        - name: max_sessions
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 50
          description: Maximum number of sessions to keep
      responses:
        "200":
          description: Cleanup completed successfully
          content:
            application/json:
              schema:
                type: object
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/ValidationError"

components:
  securitySchemes:
    APIKeyHeader:
      type: apiKey
      in: header
      name: X-API-Key

  schemas:
    Error:
      type: object
      properties:
        detail:
          type: string
          description: Error message
        status:
          type: integer
          description: HTTP status code

    MessageResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
      description: Standard message response

    # MCP Host Schemas
    ServerRuntimeInfo:
      type: object
      required:
        - name
        - transport_type
        - tools_count
        - registration_time
      properties:
        name:
          type: string
        status:
          type: string
          default: "active"
        transport_type:
          type: string
        tools_count:
          type: integer
        registration_time:
          type: string
          format: date-time
      description: Runtime information about a registered MCP server.

    ServerDetailedStatus:
      type: object
      required:
        - name
        - registered
        - status
        - transport_type
        - tools
        - registration_time
        - session_active
      properties:
        name:
          type: string
        registered:
          type: boolean
        status:
          type: string
        transport_type:
          type: string
        tools:
          type: array
          items:
            type: string
        registration_time:
          type: string
          format: date-time
        session_active:
          type: boolean
      description: Detailed runtime status for a specific MCP server.

    ServerTestResult:
      type: object
      required:
        - status
        - server_name
        - connection_time
        - tools_discovered
        - test_tool_result
        - error
      properties:
        status:
          type: string
        server_name:
          type: string
        connection_time:
          type: number
        tools_discovered:
          type: array
          items:
            type: string
        test_tool_result:
          type: object
          additionalProperties: true
        error:
          type: string
      description: Result of testing an MCP server configuration.

    ToolDetails:
      type: object
      required:
        - name
        - description
        - server_name
        - inputSchema
      properties:
        name:
          type: string
        description:
          type: string
        server_name:
          type: string
        inputSchema:
          type: object
          additionalProperties: true
      description: Detailed information about a specific tool.

    ToolCallArgs:
      type: object
      required:
        - args
      properties:
        args:
          type: object
          additionalProperties: true

    ClientConfig:
      type: object
      required:
        - name
        - capabilities
      properties:
        name:
          type: string
          description: The unique name of the component.
        description:
          type: string
          description: A brief description of the component.
        type:
          type: string
          const: mcp_server
          default: mcp_server
        transport_type:
          type: string
          enum: [stdio, http_stream, local]
          description: The transport type for the client.
        server_path:
          type: string
          description: Path to the server script for 'stdio' transport.
        http_endpoint:
          type: string
          description: URL endpoint for 'http_stream' transport.
        headers:
          type: object
          additionalProperties:
            type: string
          description: HTTP headers for 'http_stream' transport.
        command:
          type: string
          description: The command to run for 'local' transport.
        args:
          type: array
          items:
            type: string
          description: Arguments for the 'local' transport command.
        roots:
          type: array
          items:
            $ref: "#/components/schemas/RootConfig"
          description: List of root configurations for this client.
        capabilities:
          type: array
          items:
            type: string
          description: List of capabilities this client provides (e.g., 'tools', 'prompts').
        timeout:
          type: number
          default: 10.0
          description: Default timeout in seconds for client operations.
        registration_timeout:
          type: number
          default: 30.0
          description: Timeout for registering the mcp client
        routing_weight:
          type: number
          default: 1.0
          description: Weight for server selection during routing.
        exclude:
          type: array
          items:
            type: string
          description: List of component names (prompt, resource, tool) to exclude from this client.
      description: Configuration for an MCP client

    RootConfig:
      type: object
      required:
        - uri
        - name
        - capabilities
      properties:
        uri:
          type: string
          description: The URI of the root.
        name:
          type: string
          description: The name of the root.
        capabilities:
          type: array
          items:
            type: string
          description: A list of capabilities provided by this root.
      description: Configuration for an MCP root

    # Configuration Manager Schemas
    ComponentCreate:
      type: object
      required:
        - name
        - config
      properties:
        name:
          type: string
          description: Unique name for the component
        config:
          type: object
          additionalProperties: true
          description: Component configuration
      description: Request model for creating a new component

    ComponentUpdate:
      type: object
      required:
        - config
      properties:
        config:
          type: object
          additionalProperties: true
          description: Updated component configuration
      description: Request model for updating an existing component

    FileCreateRequest:
      type: object
      required:
        - source_name
        - relative_path
        - content
      properties:
        source_name:
          type: string
        relative_path:
          type: string
        content:
          type: string

    FileUpdateRequest:
      type: object
      required:
        - content
      properties:
        content:
          type: string

    ProjectCreate:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          pattern: "^[a-zA-Z0-9_-]+$"
          description: Project name
        description:
          type: string
          description: Project description
      description: Request model for creating a new project

    ProjectUpdate:
      type: object
      properties:
        description:
          type: string
          description: Project description
        include_configs:
          type: array
          items:
            type: string
          description: Configuration directories
        new_name:
          type: string
          pattern: "^[a-zA-Z0-9_-]+$"
          description: New project name for renaming
      description: Request model for updating a project

    ProjectInfo:
      type: object
      required:
        - name
        - path
        - is_active
        - include_configs
      properties:
        name:
          type: string
        path:
          type: string
        is_active:
          type: boolean
        include_configs:
          type: array
          items:
            type: string
        description:
          type: string
        created_at:
          type: number
      description: Response model for project information

    WorkspaceInfo:
      type: object
      required:
        - name
        - path
        - projects
        - include_configs
        - is_active
      properties:
        name:
          type: string
        path:
          type: string
        projects:
          type: array
          items:
            type: string
        include_configs:
          type: array
          items:
            type: string
        is_active:
          type: boolean
        description:
          type: string
      description: Response model for workspace information

    # Execution Facade Schemas
    AgentRunRequest:
      type: object
      required:
        - user_message
      properties:
        user_message:
          type: string
        system_prompt:
          type: string
        session_id:
          type: string

    WorkflowRunRequest:
      type: object
      required:
        - initial_input
      properties:
        initial_input:
          description: Initial input for the workflow
        session_id:
          type: string

    SessionMetadata:
      type: object
      required:
        - session_id
        - agent_name
        - message_count
      properties:
        session_id:
          type: string
        agent_name:
          type: string
        created_at:
          type: string
        last_updated:
          type: string
        message_count:
          type: integer

    SessionListResponse:
      type: object
      required:
        - sessions
        - total
        - offset
        - limit
      properties:
        sessions:
          type: array
          items:
            $ref: "#/components/schemas/SessionMetadata"
        total:
          type: integer
        offset:
          type: integer
        limit:
          type: integer

    ConversationMessage:
      type: object
      required:
        - role
        - content
      properties:
        role:
          type: string
        content:
          anyOf:
            - type: string
            - type: array
              items:
                type: object
                additionalProperties: true
        timestamp:
          type: string

    SessionHistoryResponse:
      type: object
      required:
        - session_id
        - agent_name
        - messages
        - metadata
      properties:
        session_id:
          type: string
        agent_name:
          type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/ConversationMessage"
        metadata:
          $ref: "#/components/schemas/SessionMetadata"

    # Validation Error Schema
    ValidationError:
      type: object
      required:
        - loc
        - msg
        - type
      properties:
        loc:
          type: array
          items:
            anyOf:
              - type: string
              - type: integer
        msg:
          type: string
        type:
          type: string

    HTTPValidationError:
      type: object
      properties:
        detail:
          type: array
          items:
            $ref: "#/components/schemas/ValidationError"

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    Unauthorized:
      description: Unauthorized - Invalid or missing API key
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    ValidationError:
      description: Validation Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/HTTPValidationError"

tags:
  - name: System
    description: System health and status endpoints
  - name: MCP Host
    description: MCP server management and tool operations
  - name: Configuration Manager
    description: Component and configuration management
  - name: Execution Facade
    description: Agent and workflow execution operations
